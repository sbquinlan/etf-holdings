/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/ccp/auth/init": {
    /** Initiate a brokerage session to CCP. Only one brokerage session type can run at a time. If an existing brokerage session to iServer is running then call the endpoint /logout first. Note at this time only order management is possible from CCP session, market data and scanner endpoints can't be used since they are only available from iServer session. Work is in progress to provide new CCP endpoints for market data and scanners. */
    post: {
      parameters: {
        formData: {
          /** Allow competing CCP session to run */
          compete?: boolean;
          /** Concatenate value for language and region, set to "en_US" */
          locale?: string;
          /** Local MAC Address */
          mac?: string;
          /** Local machine ID */
          machineId?: string;
          /** Login user, set to dash "-" */
          username?: string;
        };
      };
      responses: {
        /** Returns challenge for connection */
        200: {
          schema: {
            /** @description Challenge in hex format */
            challenge?: string;
          };
        };
      };
    };
  };
  "/ccp/auth/response": {
    /** Session Token Authentication */
    post: {
      parameters: {
        body: {
          auth?: {
            response?: string;
          };
        };
      };
      responses: {
        /** Valid result */
        200: {
          schema: {
            authenticated?: boolean;
          };
        };
        /** Access denied */
        401: unknown;
        /** System error */
        500: unknown;
      };
    };
  };
  "/ccp/status": {
    /** Provide the current CCP session status. */
    get: {
      responses: {
        /** Valid result */
        200: {
          schema: {
            authenticated?: boolean;
            connected?: boolean;
          };
        };
        /** Access denied */
        401: unknown;
        /** System error */
        500: unknown;
      };
    };
  };
  "/ccp/positions": {
    /** List of positions */
    get: {
      responses: {
        /** Valid result */
        200: {
          schema: definitions["position-data"];
        };
        /** Access denied */
        401: unknown;
        /** System error */
        500: unknown;
      };
    };
  };
  "/ccp/orders": {
    /** Get status for all orders */
    get: {
      parameters: {
        query: {
          /** User Account */
          acct: string;
          /** Return only Rejected or Cancelled orders since today midnight */
          cancelled?: boolean;
        };
      };
      responses: {
        /** An Object */
        200: {
          schema: {
            orders?: definitions["order-data"][];
          };
        };
        /** Bad request */
        400: unknown;
        /** Access denied */
        401: unknown;
        /** System error */
        500: unknown;
      };
    };
  };
  "/ccp/order": {
    /** Updates an Order. Updating an order requires the same arguments as  placing an order besides the conid.<br> Development: Passing arguments as GET is also supported  (requires passing action= (GET is meant for development only).<br> Note: The status of the order can be queried through /ccp/order. */
    put: {
      parameters: {
        query: {
          /** User Account */
          acct: string;
          /** Order ID to be modified */
          id: number;
        };
      };
      responses: {
        /** An Object */
        200: {
          schema: definitions["order-data"];
        };
        /** Access denied */
        401: unknown;
        /** System error, for example when connection to CCP failed */
        500: unknown;
      };
    };
    /** Submits an Order. Passing arguments as GET is also supported  (meant for development only) */
    post: {
      parameters: {
        query: {
          /** User Account */
          acct: string;
          /** Contract ID */
          conid: number;
          /** Currency (GBP, EUR) */
          ccy: string;
          /** Exchange (IBET, IBET_UK) */
          exchange: string;
          /** Order Quantity */
          qty: number;
          /** Order Price; required if order type is limit */
          type?: "limit" | "market";
          /** Side */
          side?: "sell" | "buy";
          /** Order Price; required if order type is limit */
          price?: number;
          /** Time in Force */
          tif?: "IOC" | "GTC";
        };
      };
      responses: {
        /** An Object */
        200: {
          schema: definitions["order-data"];
        };
        /** Bad Request */
        400: unknown;
        /** Access denied */
        401: unknown;
        /** System error, for example when connection to CCP failed */
        500: unknown;
      };
    };
    /** Sends an Order cancellation request. The status of the order can be queried through /ccp/order. Passing arguments as GET is also supported (requires passing action=delete) (GET is meant for development only) */
    delete: {
      parameters: {
        query: {
          /** User Account */
          acct: string;
          /** Order ID */
          id: number;
        };
      };
      responses: {
        /** An Object */
        200: {
          schema: definitions["order-data"];
        };
        /** Access denied */
        401: unknown;
        /** System error, for example when connection to CCP failed */
        500: unknown;
      };
    };
  };
  "/ccp/trades": {
    /** Get a list of Trades, by default, the list is from today midnight to Date.now(). */
    get: {
      parameters: {
        query: {
          /** From Date (YYYYMMDD-HH:mm:ss) or offset (-1,-2,-3..) */
          from?: string;
          /** To Date (YYYYMMDD-HH:mm:ss) or offset (-1,-2,-3..). To value should be bigger than from value. */
          to?: string;
        };
      };
      responses: {
        /** An Object */
        200: {
          schema: {
            orders?: definitions["order-data"][];
          };
        };
        /** Bad request */
        400: unknown;
        /** Access denied */
        401: unknown;
        /** System error */
        500: unknown;
      };
    };
  };
  "/trsrv/secdef": {
    /** Returns a list of security definitions for the given conids */
    post: {
      parameters: {
        body: {
          /** request body */
          body: {
            conids?: number[];
          };
        };
      };
      responses: {
        /** returns an array of secdef info */
        200: {
          schema: definitions["secdef"];
        };
      };
    };
  };
  "/trsrv/secdef/schedule": {
    /** Returns the trading schedule up to a month for the requested contract */
    get: {
      parameters: {
        query: {
          /**
           * specify the asset class of the contract.
           * Available values-- Stock: STK, Option: OPT, Future: FUT, Contract For Difference: CFD, Warrant: WAR, Forex: SWP, Mutual Fund: FND, Bond: BND, Inter-Commodity Spreads: ICS
           */
          assetClass: string;
          /** Underlying Symbol for specified contract, for example 'AAPL' for US Stock - Apple Inc. */
          symbol: string;
          /** Native exchange for contract, for example 'NASDAQ' for US Stock - Apple Inc. */
          exchange?: string;
          /** Response only returns trading schedule for specified exchange */
          exchangeFilter?: string;
        };
      };
      responses: {
        /** Returns an object */
        200: {
          schema: {
            /** @description Exchange parameter id */
            id?: string;
            /** @description Reference on a trade venue of given exchange parameter */
            tradeVenueId?: string;
            /** @description Always contains at least one 'tradingTime'  and zero or more 'sessionTime' tags */
            schedules?: {
              clearingCycleEndTime?: number;
              /** @description 20000101 stands for any Sat, 20000102 stands for any Sun, ... 20000107 stands for any Fri. Any other date stands for itself. */
              tradingScheduleDate?: number;
              /** @description If the LIQUID hours differs from the total trading day then a separate 'session' tag is returned. */
              sessions?: {
                openingTime?: number;
                closingTime?: number;
                /** @description If the whole trading day is considered LIQUID then the value 'LIQUID' is returned. */
                prop?: string;
              };
              /** @description Returns tradingTime in exchange time zone. */
              tradingTimes?: {
                openingTime?: number;
                closingTime?: number;
                cancelDayOrders?: string;
              };
            }[];
          };
        };
      };
    };
  };
  "/trsrv/futures": {
    /** Returns a list of non-expired future contracts for given symbol(s) */
    get: {
      parameters: {
        query: {
          /** list of case-sensitive symbols separated by comma */
          symbols: string;
        };
      };
      responses: {
        /** returns an object with symbol and and array of its future contracts */
        200: {
          schema: {
            symbol?: definitions["futures"];
          };
        };
        /** error while processing the request */
        500: {
          schema: {
            error?: string;
          };
        };
      };
    };
  };
  "/trsrv/stocks": {
    /** Returns an object contains all stock contracts for given symbol(s) */
    get: {
      parameters: {
        query: {
          /** list of upper-sensitive symbols separated by comma */
          symbols: string;
        };
      };
      responses: {
        /** returns an object with symbols */
        200: {
          schema: {
            symbol?: definitions["stocks"];
          };
        };
        /** error while processing the request */
        500: {
          schema: {
            error?: string;
          };
        };
      };
    };
  };
  "/iserver/auth/status": {
    /** Current Authentication status to the Brokerage system. Market Data and Trading is not possible if not authenticated, e.g. authenticated shows false */
    post: {
      responses: {
        /** Authentication Status */
        200: {
          schema: definitions["authStatus"];
        };
      };
    };
  };
  "/iserver/reauthenticate": {
    /** When using the CP Gateway, this endpoint provides a way to reauthenticate to the Brokerage system as long as there is a valid SSO session, see /sso/validate. */
    post: {
      responses: {
        /** Authentication Status */
        200: {
          schema: definitions["authStatus"];
        };
      };
    };
  };
  "/iserver/account/trades": {
    /** Returns a list of trades for the currently selected account for current day and six previous days. It is advised to call this endpoint once per session. */
    get: {
      responses: {
        /** An array of trades */
        200: {
          schema: definitions["trade"][];
        };
      };
    };
  };
  "/iserver/accounts": {
    /** Returns a list of accounts the user has trading access to, their respective aliases and the currently selected account. Note this endpoint must be called before modifying an order or querying open orders. */
    get: {
      responses: {
        /** An array of accounts */
        200: {
          schema: {
            /** @description Unique account id */
            accounts?: string[];
            /** @description Account Id and its alias */
            aliases?: { [key: string]: unknown };
            selectedAccount?: string;
          };
        };
      };
    };
  };
  "/iserver/account": {
    /** If an user has multiple accounts, and user wants to get orders, trades, etc. of an account other than currently selected account, then user can update the currently selected account using this API and then can fetch required information for the newly updated account. */
    post: {
      parameters: {
        body: {
          /** account id */
          body: definitions["set-account"];
        };
      };
      responses: {
        /** an object containing updated account ID */
        200: {
          schema: {
            set?: boolean;
            acctId?: string;
          };
        };
      };
    };
  };
  "/iserver/account/{accountId}/alert": {
    /** Please note here, DO NOT pass orderId when creating a new alert, toolId is only required for MTA alert */
    post: {
      parameters: {
        path: {
          /** account id */
          accountId: string;
        };
        body: {
          /** alert info */
          body: definitions["alert-request"];
        };
      };
      responses: {
        /** returns an object */
        200: {
          schema: {
            request_id?: number;
            order_id?: number;
            success?: boolean;
            text?: string;
            order_status?: string;
            warning_message?: string;
          };
        };
      };
    };
  };
  "/iserver/account/:accountId/alerts": {
    /** The response will contain both active and inactive alerts, but it won't have MTA alert */
    get: {
      parameters: {
        path: {
          /** account id */
          accountId: string;
        };
      };
      responses: {
        /** returns an array of objects */
        200: {
          schema: {
            order_id?: number;
            /** @description account id */
            account?: string;
            alert_name?: string;
            /** @description Value can only be 0 or 1, 1 means active */
            alert_active?: number;
            /** @description format, YYYYMMDD-HH:mm:ss, the time when you created the alert */
            order_time?: string;
            /** @description whether the alert has been triggered or not */
            alert_triggered?: boolean;
            /** @description whether the alert can be repeatable or not, value can be 1 or 0. 1 means true */
            alert_repeatable?: number;
          }[];
        };
      };
    };
  };
  "/iserver/account/:accountId/alert/activate": {
    /** Please note, if alertId is 0, it will activate/deactivate all alerts */
    post: {
      parameters: {
        path: {
          /** account id */
          accountId: string;
        };
        body: {
          /** order request info */
          body: {
            /** @description alert id(order id) */
            alertId?: number;
            /** @description 1 to activate, 0 to deactivate */
            alertActive?: number;
          };
        };
      };
      responses: {
        /** returns an object */
        200: {
          schema: {
            request_id?: number;
            order_id?: number;
            success?: boolean;
            text?: string;
            order_status?: string;
            failure_list?: string;
          };
        };
      };
    };
  };
  "/iserver/account/:accountId/alert/:alertId": {
    /** Please be careful, if alertId is 0, it will delete all alerts */
    delete: {
      parameters: {
        path: {
          /** account id */
          accountId: string;
          /** alert id */
          alertId: string;
        };
      };
      responses: {
        /** returns an object */
        200: {
          schema: {
            request_id?: number;
            order_id?: number;
            success?: boolean;
            text?: string;
            order_status?: string;
            failure_list?: string;
          };
        };
      };
    };
  };
  "/iserver/account/alert/:id": {
    /**
     * Use the endpoint /iserver/account/:accountId/alerts to receive the alert id.
     * The order_id in the response is the alert id.
     */
    get: {
      parameters: {
        path: {
          /** alert id */
          id: string;
        };
      };
      responses: {
        /** returns an object */
        200: {
          schema: definitions["alert-response"];
        };
      };
    };
  };
  "/iserver/account/mta": {
    /**
     * Each login user only has one mobile trading assistant (MTA) alert with it's own unique tool id.
     * The tool id cannot be changed. When modified a new order Id is generated. MTA alerts can not
     * be created or deleted. If you call delete /iserver/account/:accountId/alert/:alertId,
     * it will reset MTA to default. See [here](https://www.interactivebrokers.com/en/software/mobileiphonemobile/mobileiphone.htm#monitor/trading-assistant.htm) for more information on MTA alerts.
     */
    get: {
      responses: {
        /** returns an object */
        200: {
          schema: definitions["alert-response"];
        };
      };
    };
  };
  "/iserver/account/orders": {
    /**
     * The endpoint is meant to be used in polling mode, e.g. requesting every x seconds.
     * The response will contain two objects, one is notification, the other is orders.
     * Orders is the list of live orders (cancelled, filled, submitted).
     * Notifications contains information about execute orders as they happen, see status field.
     * To receive streaming live orders the endpoint /ws can be used. Refer to [Streaming WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details.
     */
    get: {
      parameters: {
        query: {
          /** list of filters separated by comma */
          Filters?: string;
        };
      };
      responses: {
        /** An object contains two arrays */
        200: {
          schema: {
            filters?: (
              | "inactive"
              | "pending_submit"
              | "pre_submitted"
              | "submitted"
              | "filled"
              | "pending_cancel"
              | "cancelled"
              | "warn_state"
              | "sort_by_time"
            )[];
            orders?: {
              /** @description Account number */
              acct?: string;
              /** @description conid and exchange. Format supports conid or conid@exchange */
              conidex?: string;
              /** @description Contract identifier */
              conid?: number;
              /** @description Order identifier */
              orderId?: string;
              /** @description Cash currency */
              cashCcy?: string;
              /** @description Quantity outstanding and total quantity concatenated with forward slash separator */
              sizeAndFills?: string;
              /** @description Order description */
              orderDesc?: string;
              /** @description Formatted ticker description */
              description1?: string;
              /** @description Underlying symbol */
              ticker?: string;
              /** @description Asset class */
              secType?: string;
              /** @description Listing Exchange */
              listingExchange?: string;
              /** @description Quantity remaining */
              remainingQuantity?: number;
              /** @description Quantity filled */
              filledQuantity?: number;
              /** @description Company Name */
              companyName?: string;
              /** @description Status of the order */
              status?: string;
              /** @description Original order type */
              origOrderType?: string;
              /** @description Supports Tax Optimization with 0 for no and 1 for yes */
              supportsTaxOpt?: number;
              /** @description Last status update in format YYMMDDhhmms based in GMT */
              lastExecutionTime?: number;
              /** @description Last status update unix time in ms */
              lastExecutionTime_r?: number;
              /** @description Order type */
              orderType?: string;
              /** @description Order reference */
              order_ref?: string;
              /**
               * @description The side of the market of the order.
               *  * BUY: Buy contract near posted ask price
               *  * SELL: Sell contract near posted bid price
               *  * ASSN: Option Assignment, if BUYSELL=BUY and OptionType=PUT or BUYSELL=SELL and OptionType=CALL
               *  * EXER: Option Exercise, if BUYSELL=SELL and OptionType=PUT or BUYSELL=BUY and OptionType=CALL
               *
               * @enum {string}
               */
              side?: "BUY" | "SELL" | "ASSN" | "EXER";
              /** @description Time in force */
              timeInForce?: string;
              /** @description Price of order */
              price?: number;
              /** @description Background color in hex format */
              bgColor?: string;
              /** @description Foreground color in hex format */
              fgColor?: string;
            }[];
            /** @description If live order update is a snapshot */
            snapshot?: boolean;
          };
        };
      };
    };
  };
  "/iserver/account/{accountId}/order": {
    /**
     * This endpoint is going to be deprecated, you can use /iserver/account/{accountId}/orders, just pass one order
     * in the array, the order structure will be same.
     * Please note here, sometimes this endpoint alone can't make sure you submit the order successfully,
     * you could receive some questions in the response, you have to to answer them in order to submit the order
     * successfully. You can use "/iserver/reply/{replyid}" endpoint to answer questions
     */
    post: {
      parameters: {
        path: {
          /** account id */
          accountId: string;
        };
        body: {
          /** order request info */
          body: definitions["order-request"];
        };
      };
      responses: {
        /** returns an array */
        200: {
          schema: {
            id?: string;
            /**
             * @description Please note here, if the message is a question, you have to reply to question in order to submit
             * the order successfully. See more in the "/iserver/reply/{replyid}" endpoint.
             */
            message?: string[];
          }[];
        };
      };
    };
  };
  "/iserver/account/{accountId}/orders": {
    /**
     * When connected to an IServer Brokerage Session, this endpoint will allow you to submit orders.
     * CP WEB API supports various advanced orderTypes, for additional details and examples refer to [IBKR Quant Blog](https://www.tradersinsight.news/category/ibkr-quant-news/programming_languages/rest-development/).
     *   * Bracket - Attach additional opposite-side order(s) by using a single **cOID** sent with the parent and set the same value for **parentId** in each child order(s).
     *   * Cash Quantity -  Send orders using monetary value by specifying **cashQty** instead of quantity, e.g. cashQty: 200. The endpoint /iserver/contract/rules returns list of valid orderTypes in cqtTypes.
     *   * Currency Conversion - Convert cash from one currency to another by including **isCcyConv** = **true**. To specify the cash quantity use **fxQTY** instead of quantity, e.g. fxQTY: 100.
     *   * Fractional - Contracts that support fractional shares can be traded by specifying **quantity** as a float, e.g. quantity: 0.001. The endpoint /iserver/contract/rules returns a list of valid orderTypes in fraqTypes.
     *   * IB Algos - Attached user-defined settings to your trades by using any of IBKR's Algo Orders. Use the endpoint /iserver/contract/{conid}/algos to identify the available strategies for a contract.
     *   * One-Cancels-All (OCA) - Group multiple unrelated orders by passing order request info in an array and including **isSingleGroup = true** for each order. All orders will be assigned the same oca_group_id.
     */
    post: {
      parameters: {
        path: {
          /** account id */
          accountId: string;
        };
        body: {
          /** order request info */
          body: {
            /**
             * @description Notes for bracket orders: 1. Children orders will not have its own "cOID", so please donot pass "cOID"
             * parameter in child order.Instead, they will have a "parentId" which must be equal to "cOID" of parent.
             * 2. When you cancel a parent order, it will cancel all bracket orders, when you cancel one child order,
             * it will also cancel its sibling order.
             */
            orders?: definitions["order-request"][];
          };
        };
      };
      responses: {
        /** returns an array */
        200: {
          schema: {
            id?: string;
            /**
             * @description Please note here, if the message is a question, you have to reply to question in order to submit
             * the order successfully. See more in the "/iserver/reply/{replyid}" endpoint.
             */
            message?: string[];
          }[];
        };
      };
    };
  };
  "/iserver/account/orders/{faGroup}": {
    /**
     * Financial Advisors can use this endpoint to place an order for a specified group. To place an order for a specified account use the endpoint /iserver/account/{accountId}/order.
     * More information about groups can be found in the [TWS Users' Guide:](https://guides.interactivebrokers.com/twsguide/twsguide.htm#usersguidebook/financialadvisors/create_an_account_group_for_share_allocation.htm).
     */
    post: {
      parameters: {
        path: {
          /** financial advisor group */
          faGroup: string;
        };
        body: {
          /** order request info */
          body: definitions["order-request"];
        };
      };
      responses: {
        /** returns an array */
        200: {
          schema: {
            id?: string;
            /**
             * @description Please note here, if the message is a question, you have to reply to question in order to submit
             * the order successfully. See more in the "/iserver/reply/{replyid}" endpoint.
             */
            message?: string[];
          }[];
        };
      };
    };
  };
  "/iserver/reply/{replyid}": {
    /** Reply to questions when placing orders and submit orders */
    post: {
      parameters: {
        path: {
          /** Please use the "id" from the response of "Place Order" endpoint */
          replyid: string;
        };
        body: {
          /** Answer to question */
          body: {
            /** @description answer to question, true means yes, false means no */
            confirmed?: boolean;
          };
        };
      };
      responses: {
        /** Order is submitted successfully, returns an array contains one object */
        200: {
          schema: {
            order_id?: string;
            order_status?: string;
            local_order_id?: string;
          }[];
        };
        /** When you send "confirmed-false" in the request, you will receive this */
        400: {
          schema: {
            /** @description for example-order not confirmed */
            error?: string;
            statusCode?: number;
          };
        };
      };
    };
  };
  "/iserver/account/{accountId}/order/whatif": {
    /**
     * This end-point is going to be deprecated, you can use /iserver/account/{accountId}/orders/whatif,
     * just pass one order in the array, the order structure will be same.
     * This endpoint allows you to preview order without actually submitting the order and you can get
     * commission information in the response.
     */
    post: {
      parameters: {
        path: {
          /** account id */
          accountId: string;
        };
        body: {
          /** order info */
          body: definitions["order-request"];
        };
      };
      responses: {
        /** returns an object */
        200: {
          schema: {
            amount?: {
              /** @description for example 23,000 USD */
              amount?: string;
              /** @description for example 1.1 ... 1.2 USD */
              commission?: string;
              total?: string;
            };
            equity?: {
              current?: string;
              change?: string;
              after?: string;
            };
            initial?: {
              current?: string;
              change?: string;
              after?: string;
            };
            maintenance?: {
              current?: string;
              change?: string;
              after?: string;
            };
            warn?: string;
            error?: string;
          };
        };
      };
    };
  };
  "/iserver/account/{accountId}/orders/whatif": {
    /**
     * This endpoint allows you to preview order without actually submitting the order and you can get
     * commission information in the response. Also supports bracket orders.
     */
    post: {
      parameters: {
        path: {
          /** account id */
          accountId: string;
        };
        body: {
          /** order info */
          body: {
            /**
             * @description Notes for bracket orders: 1. Children orders will not have its own "cOID", so please donot pass "cOID"
             * parameter in child order.Instead, they will have a "parentId" which must be equal to "cOID" of parent.
             * 2. When you cancel a parent order, it will cancel all bracket orders, when you cancel one child order,
             * it will also cancel its sibling order.
             */
            orders?: definitions["order-request"][];
          };
        };
      };
      responses: {
        /** returns an object */
        200: {
          schema: {
            amount?: {
              /** @description for example 23,000 USD */
              amount?: string;
              /** @description for example 1.1 ... 1.2 USD */
              commission?: string;
              total?: string;
            };
            equity?: {
              current?: string;
              change?: string;
              after?: string;
            };
            initial?: {
              current?: string;
              change?: string;
              after?: string;
            };
            maintenance?: {
              current?: string;
              change?: string;
              after?: string;
            };
            warn?: string;
            error?: string;
          };
        };
      };
    };
  };
  "/iserver/account/order/status/{orderId}": {
    get: {
      parameters: {
        path: {
          /** Customer order id, use /iservers/account/orders endpoint to query orderId. */
          orderId: string;
        };
      };
      responses: {
        /** returns an object */
        200: {
          schema: definitions["order-status"];
        };
      };
    };
  };
  "/iserver/account/{accountId}/order/{orderId}": {
    /** Modifies an open order. Must call /iserver/accounts endpoint prior to modifying an order. Use /iservers/account/orders endpoint to review open-order(s). */
    post: {
      parameters: {
        path: {
          /** account id, or fa group if modifying a group order */
          accountId: string;
          /** Customer order id, use /iservers/account/orders endpoint to query orderId. */
          orderId: string;
        };
        body: {
          /** modify-order request */
          body: definitions["modify-order"];
        };
      };
      responses: {
        /** returns an array */
        200: {
          schema: {
            order_id?: string;
            local_order_id?: string;
            order_status?: string;
          }[];
        };
      };
    };
    /** Cancels an open order. Must call /iserver/accounts endpoint prior to cancelling an order. Use /iservers/account/orders endpoint to review open-order(s) and get latest order status. */
    delete: {
      parameters: {
        path: {
          /** account id, or fa group if deleting a group order */
          accountId: string;
          /** Customer order id, use /iservers/account/orders endpoint to query orderId. */
          orderId: string;
        };
      };
      responses: {
        /** returns an object with order id, message, conid and account id */
        200: {
          schema: {
            order_id?: string;
            msg?: string;
            conid?: number;
            account?: string;
          };
        };
      };
    };
  };
  "/iserver/marketdata/snapshot": {
    /**
     * Get Market Data for the given conid(s). The endpoint will return by default bid, ask, last, change, change pct, close, listing exchange.
     * See response fields for a list of available fields that can be request via fields argument.
     * The endpoint /iserver/accounts must be called prior to /iserver/marketdata/snapshot.
     * For derivative contracts the endpoint /iserver/secdef/search must be called first.
     * First /snapshot endpoint call for given conid will initiate the market data request.
     * To receive all available fields the /snapshot endpoint will need to be called several times.
     * To receive streaming market data the endpoint /ws can be used. Refer to [Streaming WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details.
     */
    get: {
      parameters: {
        query: {
          /** list of conids separated by comma */
          conids: string;
          /** time period since which updates are required. uses epoch time with milliseconds. */
          since?: number;
          /** list of fields separated by comma */
          fields?: string;
        };
      };
      responses: {
        /** Returns an array of objects */
        200: {
          schema: {
            /**
             * @description Last Price - The last price at which the contract traded. May contain one of the following prefixes:
             *   * C - Previous day's closing price.
             *   * H - Trading has halted.
             */
            "31"?: string;
            /** @description Symbol */
            "55"?: string;
            /** @description Text */
            "58"?: string;
            /** @description High - Current day high price */
            "70"?: string;
            /** @description Low - Current day low price */
            "71"?: string;
            /** @description Market Value - The current market value of  your position in the security. Market Value is calculated with real time market data (even when not subscribed to market data). */
            "73"?: string;
            /** @description Avg Price - The average price of the position. */
            "74"?: string;
            /** @description Unrealized PnL - Unrealized profit or loss. Unrealized PnL is calculated with real time market data (even when not subscribed to market data). */
            "75"?: string;
            /** @description Formatted position */
            "76"?: string;
            /** @description Formatted Unrealized PnL */
            "77"?: string;
            /** @description Daily PnL - Your profit or loss of the day since prior close. Daily PnL is calculated with real time market data (even when not subscribed to market data). */
            "78"?: string;
            /** @description Realized PnL - Realized profit or loss. Realized PnL is calculated with real time market data (even when not subscribed to market data). */
            "79"?: string;
            /** @description Unrealized PnL % - Unrealized profit or loss expressed in percentage. */
            "80"?: string;
            /** @description Change - The difference between the last price and the close on the previous trading day */
            "82"?: string;
            /** @description Change % - The difference between the last price and the close on the previous trading day in percentage. */
            "83"?: string;
            /** @description Bid Price - The highest-priced bid on the contract. */
            "84"?: string;
            /** @description Ask Size - The number of contracts or shares offered at the ask price. For US stocks, the number displayed is divided by 100. */
            "85"?: string;
            /** @description Ask Price - The lowest-priced offer on the contract. */
            "86"?: string;
            /** @description Volume - Volume for the day, formatted with 'K' for thousands or 'M' for millions. For higher precision volume refer to field 7762. */
            "87"?: string;
            /** @description Bid Size - The number of contracts or shares bid for at the bid price. For US stocks, the number displayed is divided by 100. */
            "88"?: string;
            /** @description Exchange */
            "6004"?: string;
            /** @description Conid - Contract identifier from IBKR's database. */
            "6008"?: number;
            /** @description SecType - The asset class of the instrument. */
            "6070"?: string;
            /** @description Months */
            "6072"?: string;
            /** @description Regular Expiry */
            "6073"?: string;
            /** @description Marker for market data delivery method (similar to request id) */
            "6119"?: string;
            /** @description Underlying Conid. Use /trsrv/secdef to get more information about the security */
            "6457"?: number;
            /** @description Service Params. */
            "6508"?: string;
            /**
             * @description Market Data Availability. The field may contain three chars. First char defines: R = RealTime, D = Delayed,
             * Z = Frozen, Y = Frozen Delayed, N = Not Subscribed. Second char defines: P = Snapshot, p = Consolidated.
             * Third char defines: B = Book
             *   * RealTime - Data is relayed back in real time without delay, market data subscription(s) are required.
             *   * Delayed - Data is relayed back 15-20 min delayed.
             *   * Frozen - Last recorded data at market close, relayed back in real time.
             *   * Frozen Delayed - Last recorded data at market close, relayed back delayed.
             *   * Not Subscribed - User does not have the required market data subscription(s) to relay back either real time or delayed data.
             *   * Snapshot - Snapshot request is available for contract.
             *   * Consolidated - Market data is aggregated across multiple exchanges or venues.
             *   * Book - Top of the book data is available for contract.
             */
            "6509"?: string;
            /** @description Company name */
            "7051"?: string;
            /** @description Ask Exch - Displays the exchange(s) offering the SMART price. A=AMEX, C=CBOE, I=ISE, X=PHLX, N=PSE, B=BOX, Q=NASDAQOM, Z=BATS, W=CBOE2, T=NASDAQBX, M=MIAX, H=GEMINI, E=EDGX, J=MERCURY */
            "7057"?: string;
            /** @description Last Exch - Displays the exchange(s) offering the SMART price. A=AMEX, C=CBOE, I=ISE, X=PHLX, N=PSE, B=BOX, Q=NASDAQOM, Z=BATS, W=CBOE2, T=NASDAQBX, M=MIAX, H=GEMINI, E=EDGX, J=MERCURY */
            "7058"?: string;
            /** @description Last Size - The number of unites traded at the last price */
            "7059"?: string;
            /** @description Bid Exch - Displays the exchange(s) offering the SMART price. A=AMEX, C=CBOE, I=ISE, X=PHLX, N=PSE, B=BOX, Q=NASDAQOM, Z=BATS, W=CBOE2, T=NASDAQBX, M=MIAX, H=GEMINI, E=EDGX, J=MERCURY */
            "7068"?: string;
            /** @description Implied Vol./Hist. Vol % - The ratio of the implied volatility over the historical volatility, expressed as a percentage. */
            "7084"?: string;
            /** @description Put/Call Interest - Put option open interest/call option open interest for the trading day. */
            "7085"?: string;
            /** @description Put/Call Volume - Put option volume/call option volume for the trading day. */
            "7086"?: string;
            /** @description Hist. Vol. % - 30-day real-time historical volatility. */
            "7087"?: string;
            /** @description Hist. Vol. Close % - Shows the historical volatility based on previous close price. */
            "7088"?: string;
            /** @description Opt. Volume - Option Volume */
            "7089"?: string;
            /** @description Conid + Exchange */
            "7094"?: string;
            /** @description canBeTraded - If contract is a trade-able instrument. Returns 1(true) or 0(false). */
            "7184"?: string;
            /** @description Contract Description */
            "7219"?: string;
            /** @description Contract Description */
            "7220"?: string;
            /** @description Listing Exchange */
            "7221"?: string;
            /** @description Industry - Displays the type of industry under which the underlying company can be categorized. */
            "7280"?: string;
            /** @description Category - Displays a more detailed level of description within the industry under which the underlying company can be categorized. */
            "7281"?: string;
            /** @description Average Volume - The average daily trading volume over 90 days. */
            "7282"?: string;
            /**
             * @description Option Implied Vol. % - A prediction of how volatile an underlying will be in the future.
             * At the market volatility estimated for a maturity thirty calendar days forward of the current trading day, and based on option prices from two consecutive expiration months.
             * To query the Implied Vol. % of a specific strike refer to field 7633.
             */
            "7283"?: string;
            /** @description Historic Volume (30d) */
            "7284"?: string;
            /** @description Put/Call Ratio */
            "7285"?: string;
            /** @description Dividend Amount - Displays the amount of the next dividend. */
            "7286"?: string;
            /**
             * @description Dividend Yield % - This value is the toal of the expected dividend payments over the next twelve months per share divided by the Current Price and is expressed as a percentage.
             * For derivatives, this displays the total of the expected dividend payments over the expiry date.
             */
            "7287"?: string;
            /** @description Ex-date of the dividend */
            "7288"?: string;
            /** @description Market Cap */
            "7289"?: string;
            /** @description P/E */
            "7290"?: string;
            /** @description EPS */
            "7291"?: string;
            /** @description Cost Basis - Your current position in this security multiplied by the average price and multiplier. */
            "7292"?: string;
            /** @description 52 Week High - The highest price for the past 52 weeks. */
            "7293"?: string;
            /** @description 52 Week Low - The lowest price for the past 52 weeks. */
            "7294"?: string;
            /** @description Open - Today's opening price. */
            "7295"?: string;
            /** @description Close - Today's closing price. */
            "7296"?: string;
            /** @description Delta - The ratio of the change in the price of the option to the corresponding change in the price of the underlying. */
            "7308"?: string;
            /** @description Gamma - The rate of change for the delta with respect to the underlying asset's price. */
            "7309"?: string;
            /** @description Theta - A measure of the rate of decline the value of an option due to the passage of time. */
            "7310"?: string;
            /** @description Vega - The amount that the price of an option changes compared to a 1% change in the volatility. */
            "7311"?: string;
            /** @description Opt. Volume Change % - Today's option volume as a percentage of the average option volume. */
            "7607"?: string;
            /** @description Implied Vol. % - The implied volatility for the specific strike of the option in percentage. To query the Option Implied Vol. % from the underlying refer to field 7283. */
            "7633"?: string;
            /** @description Mark - The mark price is, the ask price if ask is less than last price, the bid price if bid is more than the last price, otherwise it's equal to last price. */
            "7635"?: string;
            /** @description Shortable Shares - Number of shares available for shorting. */
            "7636"?: string;
            /** @description Fee Rate - Interest rate charged on borrowed shares. */
            "7637"?: string;
            /** @description Option Open Interest */
            "7638"?: string;
            /**
             * @description % of Mark Value - Displays the market value of the contract as a percentage of the total market value of the account.
             * Mark Value is calculated with real time market data (even when not subscribed to market data).
             */
            "7639"?: string;
            /** @description Shortable - Describes the level of difficulty with which the security can be sold short. */
            "7644"?: string;
            /** @description Morningstar Rating - Displays Morningstar Rating provided value. Requires [Morningstar](https://www.interactivebrokers.com/en/index.php?f=14262) subscription. */
            "7655"?: string;
            /** @description Dividends - This value is the total of the expected dividend payments over the next twelve months per share. */
            "7671"?: string;
            /** @description Dividends TTM - This value is the total of the expected dividend payments over the last twelve months per share. */
            "7672"?: string;
            /** @description EMA(200) - Exponential moving average (N=200). */
            "7674"?: string;
            /** @description EMA(100) - Exponential moving average (N=100). */
            "7675"?: string;
            /** @description EMA(50) - Exponential moving average (N=50). */
            "7676"?: string;
            /** @description EMA(20) - Exponential moving average (N=20). */
            "7677"?: string;
            /** @description Price/EMA(200) - Price to Exponential moving average (N=200) ratio -1, displayed in percents. */
            "7678"?: string;
            /** @description Price/EMA(100) - Price to Exponential moving average (N=100) ratio -1, displayed in percents. */
            "7679"?: string;
            /** @description Price/EMA(50) - Price to Exponential moving average (N=50) ratio -1, displayed in percents. */
            "7680"?: string;
            /** @description Price/EMA(20) - Price to Exponential moving average (N=20) ratio -1, displayed in percents. */
            "7681"?: string;
            /** @description Change Since Open - The difference between the last price and the open price. */
            "7682"?: string;
            /** @description Upcoming Event - Shows the next major company event. Requires [Wall Street Horizon](https://www.interactivebrokers.com/en/index.php?f=24674) subscription. */
            "7683"?: string;
            /** @description Upcoming Event Date - The date of the next major company event. Requires [Wall Street Horizon](https://www.interactivebrokers.com/en/index.php?f=24674) subscription. */
            "7684"?: string;
            /** @description Upcoming Analyst Meeting - The date and time of the next scheduled analyst meeting. Requires [Wall Street Horizon](https://www.interactivebrokers.com/en/index.php?f=24674) subscription. */
            "7685"?: string;
            /** @description Upcoming Earnings - The date and time of the next scheduled earnings/earnings call event. Requires [Wall Street Horizon](https://www.interactivebrokers.com/en/index.php?f=24674) subscription. */
            "7686"?: string;
            /** @description Upcoming Misc Event - The date and time of the next shareholder meeting, presentation or other event. Requires [Wall Street Horizon](https://www.interactivebrokers.com/en/index.php?f=24674) subscription. */
            "7687"?: string;
            /** @description Recent Analyst Meeting - The date and time of the most recent analyst meeting. Requires [Wall Street Horizon](https://www.interactivebrokers.com/en/index.php?f=24674) subscription. */
            "7688"?: string;
            /** @description Recent Earnings - The date and time of the most recent earnings/earning call event. Requires [Wall Street Horizon](https://www.interactivebrokers.com/en/index.php?f=24674) subscription. */
            "7689"?: string;
            /** @description Recent Misc Event - The date and time of the most recent shareholder meeting, presentation or other event. Requires [Wall Street Horizon](https://www.interactivebrokers.com/en/index.php?f=24674) subscription. */
            "7690"?: string;
            /** @description Probability of Max Return - Customer implied probability of maximum potential gain. */
            "7694"?: string;
            /** @description Break Even - Break even points */
            "7695"?: string;
            /** @description SPX Delta - Beta Weighted Delta is calculated using the formula; Delta x dollar adjusted beta, where adjusted beta is adjusted by the ratio of the close price. */
            "7696"?: string;
            /** @description Futures Open Interest - Total number of outstanding futures contracts */
            "7697"?: string;
            /**
             * @description Last Yield - Implied yield of the bond if it is purchased at the current last price. Last yield is calculated using the Last price on all possible call dates.
             * It is assumed that prepayment occurs if the bond has call or put provisions and the issuer can offer a lower coupon rate based on current market rates.
             * The yield to worst will be the lowest of the yield to maturity or yield to call (if the bond has prepayment provisions). Yield to worse may be the same as yield to maturity but never higher.
             */
            "7698"?: string;
            /**
             * @description Bid Yield - Implied yield of the bond if it is purchased at the current bid price. Bid yield is calculated using the Ask on all possible call dates.
             * It is assumed that prepayment occurs if the bond has call or put provisions and the issuer can offer a lower coupon rate based on current market rates.
             * The yield to worst will be the lowest of the yield to maturity or yield to call (if the bond has prepayment provisions). Yield to worse may be the same as yield to maturity but never higher.
             */
            "7699"?: string;
            /** @description Probability of Max Return - Customer implied probability of maximum potential gain. */
            "7700"?: string;
            /** @description Probability of Max Loss - Customer implied probability of maximum potential loss. */
            "7702"?: string;
            /** @description Profit Probability - Customer implied probability of any gain. */
            "7703"?: string;
            /** @description Organization Type */
            "7704"?: string;
            /** @description Debt Class */
            "7705"?: string;
            /** @description Ratings - Ratings issued for bond contract. */
            "7706"?: string;
            /** @description Bond State Code */
            "7707"?: string;
            /** @description Bond Type */
            "7708"?: string;
            /** @description Last Trading Date */
            "7714"?: string;
            /** @description Issue Date */
            "7715"?: string;
            /** @description Beta - Beta is against standard index. */
            "7718"?: string;
            /**
             * @description Ask Yield - Implied yield of the bond if it is purchased at the current offer. Ask yield is calculated using the Bid on all possible call dates.
             * It is assumed that prepayment occurs if the bond has call or put provisions and the issuer can offer a lower coupon rate based on current market rates.
             * The yield to worst will be the lowest of the yield to maturity or yield to call (if the bond has prepayment provisions). Yield to worse may be the same as yield to maturity but never higher.
             */
            "7720"?: string;
            /** @description Prior Close - Yesterday's closing price */
            "7741"?: string;
            /** @description Volume Long - High precision volume for the day. For formatted volume refer to field 87. */
            "7762"?: string;
            /** @description hasTradingPermissions - if user has trading permissions for specified contract. Returns 1(true) or 0(false). */
            "7768"?: string;
            server_id?: string;
            conid?: number;
            _updated?: number;
            /** @description Raw Volume - Volume for the day, provided in long form without formatted with K/M. This field value is deprecated, for high precision volume refer to field 7762. */
            "87_raw (deprecated)"?: string;
          }[];
        };
        /** sent when accounts are not queried before sending this request */
        400: {
          schema: {
            error?: string;
            statusCode?: number;
          };
        };
      };
    };
  };
  "/iserver/marketdata/{conid}/unsubscribe": {
    /** Cancel market data for given conid. To cancel all market data request(s), see /iserver/marketdata/unsubscribeall. */
    get: {
      parameters: {
        path: {
          /** contract id */
          conid: string;
        };
      };
      responses: {
        /** confirms market data for conid is cancelled */
        200: {
          schema: {
            /** @description success means market data was cancelled. */
            confirmed?: string;
          };
        };
        /** cancel failed */
        500: unknown;
      };
    };
  };
  "/iserver/marketdata/unsubscribeall": {
    /** Cancel all market data request(s). To cancel market data for given conid, see /iserver/marketdata/{conid}/unsubscribe. */
    get: {
      responses: {
        /** confirms market data is cancelled */
        200: {
          schema: {
            /** @description true means market data is cancelled, false means it is not. */
            confirmed?: boolean;
          };
        };
      };
    };
  };
  "/iserver/marketdata/history": {
    /**
     * Get historical market Data for given conid, length of data is controlled by 'period' and 'bar'.
     * Formatted as: min=minute, h=hour, d=day, w=week, m=month, y=year
     * e.g. period =1y with bar =1w returns 52 data points (Max of 1000 data points supported).
     * **Note**: There's a limit of 5 concurrent requests. Excessive requests will return a 'Too many requests' status 429 response.
     */
    get: {
      parameters: {
        query: {
          /** contract id */
          conid: string;
          /** Exchange of the conid (e.g. ISLAND, NYSE, etc.). Default value is empty which corresponds to primary exchange of the conid. */
          exchange?: string;
          /** available time period-- {1-30}min, {1-8}h, {1-1000}d, {1-792}w, {1-182}m, {1-15}y */
          period: string;
          /** possible value-- 1min, 2min, 3min, 5min, 10min, 15min, 30min, 1h, 2h, 3h, 4h, 8h, 1d, 1w, 1m */
          bar?: string;
          /** For contracts that support it, will determine if historical data includes outside of regular trading hours. */
          outsideRth?: boolean;
        };
      };
      responses: {
        /** Returns an object */
        200: {
          schema: definitions["history-data"];
        };
        /** Too many requests */
        429: {
          schema: {
            error?: string;
          };
        };
        /** System Error */
        500: {
          schema: definitions["system-error"];
        };
      };
    };
  };
  "/iserver/contract/{conid}/info": {
    /** Using the Contract Identifier get contract info. You can use this to prefill your order before you submit an order */
    get: {
      parameters: {
        path: {
          /** contract id */
          conid: string;
        };
      };
      responses: {
        /** returns an object */
        200: {
          schema: definitions["contract"];
        };
      };
    };
  };
  "/iserver/secdef/search": {
    /**
     * Search by underlying symbol or company name. Relays back what derivative contract(s) it has. This endpoint must be called before using /secdef/info.
     * If company name is specified will only receive limited response: conid, companyName, companyHeader and symbol.
     */
    post: {
      parameters: {
        body: {
          /** Symbol or Company Name to be searched */
          symbol: {
            /** @description symbol or name to be searched */
            symbol: string;
            /** @description should be true if the search is to be performed by name. false by default. */
            name?: boolean;
            /** @description If search is done by name, only the assets provided in this field will be returned. Currently, only STK is supported. */
            secType?: string;
          };
        };
      };
      responses: {
        /** returns an array of results */
        200: {
          schema: {
            /** @description Contract Identifier */
            conid?: number;
            /** @description Company Name - Exchange */
            companyHeader?: string;
            companyName?: string;
            /** @description Underlying symbol */
            symbol?: string;
            /** @description Exchange */
            description?: string;
            restricted?: string;
            /** @description List of Future Option expirations in YYYMMDD format separated by semicolon */
            fop?: string;
            /** @description List of Option expirations in YYYYMMDD format separated by semicolon */
            opt?: string;
            /** @description List of Warrant expirations in YYYYMMDD format separated by semicolon */
            war?: string;
            sections?: {
              /** @description Asset Class */
              secType?: string;
              /** @description List of expiration month(s) and year(s) in MMMYY format separated by semicolon */
              months?: string;
              /** @description Underlying symbol */
              symbol?: string;
              /** @description Listing Exchange */
              exchange?: string;
              /** @description For combo's defines the asset class for each leg */
              legSecType?: string;
            }[];
          }[];
        };
        /** error while processing the request */
        500: {
          schema: {
            error?: string;
          };
        };
      };
    };
  };
  "/iserver/secdef/strikes": {
    /** Query strikes for Options/Warrants. For the conid of the underlying contract, available contract months and exchanges use "/iserver/secdef/search" */
    get: {
      parameters: {
        query: {
          /** contract id of the underlying contract */
          conid: string;
          /** OPT/WAR */
          sectype: string;
          /** contract month */
          month: string;
          /** optional, default is SMART */
          exchange?: string;
        };
      };
      responses: {
        /** returns an object contains call/put strike prices */
        200: {
          schema: {
            call?: string[];
            put?: string[];
          };
        };
        /** error while processing the request */
        500: {
          schema: {
            error?: string;
          };
        };
      };
    };
  };
  "/iserver/secdef/info": {
    /** Provides Contract Details of Futures, Options, Warrants, Cash and CFDs based on conid. To get the strike price for Options/Warrants use "/iserver/secdef/strikes" endpoint. Must call /secdef/search for the underlying contract first. */
    get: {
      parameters: {
        query: {
          /** underlying contract id */
          conid: string;
          /** FUT/OPT/WAR/CASH/CFD */
          sectype: string;
          /** contract month, only required for FUT/OPT/WAR in the format MMMYY, example JAN00 */
          month?: string;
          /** optional, default is SMART */
          exchange?: string;
          /** optional, only required for OPT/WAR */
          strike?: string;
          /** C for call, P for put */
          right?: string;
        };
      };
      responses: {
        /** returns an array of objects */
        200: {
          schema: definitions["secdef-info"][];
        };
        /** error while processing the request */
        500: {
          schema: {
            error?: string;
          };
        };
      };
    };
  };
  "/iserver/contract/{conid}/algos": {
    /** Returns supported IB Algos for contract. Must be called a second time to query the list of available parameters. */
    get: {
      parameters: {
        path: {
          /** IBKR contract identifier */
          conid: string;
        };
        query: {
          /** List of algo ids delimited by ";" to filter by. Max of 8 algos ids can be specified. */
          algos?: string;
          /** Whether or not to add algo descriptions to response. Set to 1 for yes, 0 for no. */
          addDescription?: string;
          /** Whether or not to show algo parameters.  Set to 1 for yes, 0 for no. */
          addParams?: string;
        };
      };
      responses: {
        /** returns an array of algos */
        200: {
          schema: {
            name?: string;
            description?: string;
            id?: string;
            parameters?: {
              /** @description The algo parameter */
              id: string;
              /** @description If true a value must be entered. */
              required?: boolean;
              /** @description Descriptive name of the parameter. */
              name?: string;
              /**
               * @description Format of the parameter.
               * @enum {string}
               */
              valueClassName: "double" | "string" | "time" | "boolean";
              /** @description Smallest value, only applies to parameters with valueClassName=Double. */
              minValue?: number;
              /** @description Largest value, only applies to parameters with valueClassName=Double. */
              maxValue?: number;
              /** @description User configured preset for this parameter. */
              defaultValue?: boolean;
              /**
               * @description The list of choices
               * @example [
               *   "ALL:Get Done",
               *   "ALL:Aggressive",
               *   "ALL:Neutral",
               *   "ALL:Passive"
               * ]
               */
              legalStrings?: string;
              /** @description Detailed description of the parameter. */
              description?: string;
              /** @description The order in UI, used when building dynamic UI so that more important parameters are presented first. */
              guiRank?: number;
              /** @description If true, must specify parameter using market rule format. Only applies to parameters with valueClassName=Double. */
              priceMarketRule?: boolean;
              /**
               * @description The rules that UI should apply to algo parameters depending on chosen order type:
               *  * MKT:speedUp:=:no - hide SpeedUp param when MKT is chosen for order type.
               *  * LMT:strategyType:<>:empty - strategyType param cannot be empty when LMT is chosen for order type.
               *  * MKT:strategyType:=:Marketable - set strategyType param to Marketable and disable (no other choice) when MKT is chosen for order type.
               *
               * @enum {string}
               */
              enabledConditions?:
                | "MKT:speedUp:=:no"
                | "LMT:strategyType:<>:empty"
                | "MKT:strategyType:=:Marketable";
            }[];
          }[];
        };
      };
    };
  };
  "/iserver/contract/rules": {
    /** Returns trading related rules for a specific contract and side. For both contract info and rules use the endpoint /iserver/contract/{conid}/info-and-rules. */
    post: {
      parameters: {
        body: {
          conid: {
            /** @description IBKR contract identifier */
            conid: string;
            /** @description Side of the market rules apply too. Set to **true** for Buy Orders, set to **false** for Sell Orders */
            isBuy: boolean;
          };
        };
      };
      responses: {
        /** returns an array */
        200: {
          schema: {
            rules?: {
              algoEligible?: boolean;
              canTradeAcctIds?: number[];
              /** @description Returns a description on any errors with order presets */
              error?: string;
              orderTypes?: number[];
              ibalgoTypes?: number[];
              fraqTypes?: number[];
              cqtTypes?: number[];
              /** @description If object returned will provide the defaults based on user settings */
              orderDefaults?: {
                /** @description orderType */
                string?: string[];
              }[];
              orderTypesOutside?: number[];
              /** @description Default quantity */
              defaultSize?: number;
              /** @description cash value */
              cashSize?: number;
              /** @description increment quantity value */
              sizeIncrement?: number;
              tifTypes?: number[];
              /** @description Default time in force value */
              defaultTIF?: string;
              /** @description Limit price */
              limitPrice?: number;
              /** @description Stop price */
              stopprice?: number;
              /** @description Order origin designation for US securities options and Options Clearing Corporation */
              orderOrigination?: number;
              /** @description order preview required */
              preview?: boolean;
              displaySize?: number;
              /** @description decimal places for fractional order size */
              fraqInt?: number;
              /** @description Cash currency for the contract */
              cashCcy?: string;
              /** @description Increment value for cash quantity */
              cashQtyIncr?: number;
              /** @description Price Magnifier */
              priceMagnifier?: number;
              /** @description trading negative price support */
              negativeCapable?: boolean;
              /** @description Price increment value */
              increment?: number;
              /** @description Number of digits for price increment */
              incrementDigits?: number;
            }[];
          };
        };
      };
    };
  };
  "/iserver/contract/{conid}/info-and-rules": {
    /**
     * Returns both contract info and rules from a single endpoint.
     * For only contract rules, use the endpoint /iserver/contract/rules.
     * For only contract info, use the endpoint /iserver/contract/{conid}/info.
     */
    get: {
      parameters: {
        path: {
          /** IBKR contract identifier */
          conid: string;
        };
        query: {
          /** Side of the market rules apply too. Set to **true** for Buy Orders, set to **false** for Sell Orders */
          isBuy: boolean;
        };
      };
      responses: {
        /** returns an array */
        200: {
          schema: {
            /** @description Classification of Financial Instrument codes */
            cfi_code?: string;
            /** @description Underlying symbol */
            symbol?: string;
            cusip?: string;
            /** @description Expiration Date in the format YYYYMMDD */
            expiry_full?: number;
            /** @description IBKRs contract identifier */
            con_id?: number;
            /** @description Date on which the underlying transaction settles if the option is exercised */
            maturity_date?: number;
            /** @description Specific group of companies or businesses. */
            industry?: string;
            /** @description Asset Class of the contract */
            instrument_type?: string;
            /** @description Designation of the contract */
            trading_class?: string;
            /** @description Comma separated list of exchanges or trading venues */
            valid_exchanges?: string;
            /** @description Allowed to sell shares that you own */
            allow_sell_long?: boolean;
            /** @description Supports zero commission trades */
            is_zero_commission_security?: boolean;
            /** @description Contracts symbol from primary exchange. For options it is the OCC symbol. */
            local_symbol?: string;
            classifier?: string;
            /** @description Currency contract trades in */
            currency?: string;
            /** @description Formatted contract parameters */
            text?: string;
            /** @description IBKRs contract identifier for the underlying instrument */
            underlying_con_id?: number;
            /** @description Provides trading outside of Regular Trading Hours */
            r_t_h?: boolean;
            /** @description numerical value of each point of price movement */
            multiplier?: string;
            /** @description fixed price at which the owner of the option buys or sells the underlying */
            strike?: string;
            /** @description Put or Call of the option */
            right?: string;
            /** @description Legal entity for underlying contract */
            underlying_issuer?: string;
            /** @description Month the contract must be satisfied by making or accepting delivery */
            contract_month?: string;
            /** @description Contracts company name */
            company_name?: string;
            /** @description Support IBKRs SMART routing */
            smart_available?: boolean;
            /** @description Primary Exchange, Routing or Trading Venue */
            exchange?: string;
            rules?: {
              /** @description Contract supports algo orders */
              algoEligible?: boolean;
              canTradeAcctIds?: number[];
              /** @description Returns a description on any errors with order presets */
              error?: string;
              orderTypes?: number[];
              ibalgoTypes?: number[];
              fraqTypes?: number[];
              cqtTypes?: number[];
              /** @description If object returned will provide the defaults based on user settings */
              orderDefaults?: {
                /** @description orderType */
                string?: string[];
              }[];
              orderTypesOutside?: number[];
              /** @description Default quantity */
              defaultSize?: number;
              /** @description cash value */
              cashSize?: number;
              /** @description increment quantity value */
              sizeIncrement?: number;
              tifTypes?: number[];
              /** @description Default time in force value */
              defaultTIF?: string;
              /** @description Limit price */
              limitPrice?: number;
              /** @description Stop price */
              stopprice?: number;
              /** @description Order origin designation for US securities options and Options Clearing Corporation */
              orderOrigination?: number;
              /** @description order preview required */
              preview?: boolean;
              displaySize?: number;
              /** @description decimal places for fractional order size */
              fraqInt?: number;
              /** @description Cash currency for the contract */
              cashCcy?: string;
              /** @description Increment value for cash quantity */
              cashQtyIncr?: number;
              /** @description Price Magnifier */
              priceMagnifier?: number;
              /** @description trading negative price support */
              negativeCapable?: boolean;
              /** @description Price increment value */
              increment?: number;
              /** @description Number of digits for price increment */
              incrementDigits?: number;
            }[];
          };
        };
      };
    };
  };
  "/iserver/scanner/params": {
    /** Returns an object contains four lists contain all parameters for scanners */
    get: {
      responses: {
        /** An object contains lists */
        200: {
          schema: {
            scan_type_list?: {
              display_name?: string;
              code?: string;
              instruments?: string[];
            }[];
            instrument_list?: {
              display_name?: string;
              type?: string;
              filters?: string[];
            }[];
            filter_list?: {
              group?: string;
              display_name?: string;
              code?: string;
              type?: string;
            }[];
            location_tree?: {
              display_name?: string;
              type?: string;
              locations?: {
                display_name?: string;
                type?: string;
              }[];
            }[];
          };
        };
      };
    };
  };
  "/iserver/scanner/run": {
    /** Searches for contracts according to the filters specified in scanner/params endpoint */
    post: {
      parameters: {
        body: {
          /** scanner-params request */
          body: definitions["scanner-params"];
        };
      };
      responses: {
        /** returns an array */
        200: {
          schema: {
            server_id?: string;
            column_name?: string;
            /** @description Underlying symbol */
            symbol?: string;
            /** @description conid and exchange. Format supports conid or conid@exchange */
            conidex?: string;
            con_id?: number;
            /** @description List of available chart periods */
            available_chart_periods?: string;
            /** @description Contracts company name */
            company_name?: string;
            /**
             * @description Format contract name
             * @example FB Stock (NASDAQ.NMS)
             */
            contract_description_1?: string;
            listing_exchange?: string;
            sec_type?: string;
          }[];
        };
      };
    };
  };
  "/iserver/account/pnl/partitioned": {
    /**
     * Returns an object containing PnL for the selected account and its models (if any).
     * To receive streaming PnL the endpoint /ws can be used. Refer to [Streaming WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details.
     */
    get: {
      responses: {
        /** An object containing account and model(s) pnl */
        200: {
          schema: {
            acctId?: { [key: string]: unknown };
          };
        };
      };
    };
  };
  "/ws": {
    /** The streaming API is documented under [Streaming WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details. */
    post: {
      responses: {
        /** confirms session is open */
        200: unknown;
      };
    };
  };
  "/tickle": {
    /** If the gateway has not received any requests for several minutes an open session will automatically timeout. The tickle endpoint pings the server to prevent the session from ending. */
    post: {
      responses: {
        /** confirms session is open */
        200: unknown;
      };
    };
  };
  "/logout": {
    /** Logs the user out of the gateway session. Any further activity requires re-authentication. */
    post: {
      responses: {
        /** returned status indicates if user is logged in */
        200: {
          schema: {
            /** @description true means username is still logged in, false means it is not */
            confirmed?: boolean;
          };
        };
      };
    };
  };
  "/hmds/history": {
    /** Using a direct connection to the market data farm, will provide a list of historical market data for given conid. */
    get: {
      parameters: {
        query: {
          /** contract id */
          conid: number;
          /**
           * Time period for history request.
           *   * min: Minutes
           *   * h: Hours
           *   * d: Days
           *   * w: Weeks
           *   * m: Months
           *   * y: Years
           */
          period: "min" | "h" | "d" | "w" | "m" | "y";
          /**
           * Duration of time for each candlestick bar.
           *   * min: Minutes
           *   * h: Hours
           *   * d: Days
           *   * w: Weeks
           *   * m: Months
           */
          bar?: "min" | "h" | "d" | "w" | "m";
          /** For contracts that support it, will determine if history data includes outside of regular trading hours. */
          outsideRth?: boolean;
        };
      };
      responses: {
        /** Valid result */
        200: {
          schema: definitions["history-result"];
        };
        /** Bad request */
        400: unknown;
      };
    };
  };
  "/hmds/scanner": {
    /** Using a direct connection to the market data farm, will provide results to the requested scanner. */
    post: {
      parameters: {
        body: {
          /** request body */
          body: {
            /** @example BOND.GOVT */
            instrument?: string;
            /** @example BOND.GOVT.US */
            locations?: string;
            /** @example FAR_MATURITY_DATE */
            scanCode?: string;
            /** @example BOND */
            secType?: string;
            filters?: {
              /** @example bondValidNetBidOrAskOnly */
              code?: string;
              /**
               * @description Value can be either an integer, double, boolean or a string depending upon the type of filter specified in the code section
               * @example true
               */
              value?: unknown;
            }[];
          };
        };
      };
      responses: {
        /** Valid result */
        200: {
          schema: definitions["scanner-result"];
        };
        /** Bad request */
        400: unknown;
      };
    };
  };
  "/md/snapshot": {
    /**
     * Get a snapshot of Market Data for the given conid(s).See response for a list of available fields that can be requested from the fields argument.
     * Must be connected to a brokerage session before can query snapshot data.
     * First /snapshot endpoint call for given conid(s) will initiate the market data request, make an additional request to receive field values back.
     * To receive all available fields the /snapshot endpoint will need to be called several times.
     * To receive streaming market data the endpoint /ws can be used. Refer to [Streaming WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details.
     */
    get: {
      parameters: {
        query: {
          /**
           * List of conids comma separated. Optional exchange and instrument type can be specified.
           *   * conid: IBKR Contract Identifier
           *   * exchange: Exchange or venue
           *   * instrType: Instrument Type supported values: CS (Stocks), OPT (Options), FUT (Futures), FOP (Future Options), WAR (Warrants), BOND (Bonds), FUND (Mutual Funds), CASH (Forex), CFD (Contract for difference), IND (Index)
           */
          conids: "conid@exchange:instrType";
          /** list of fields separated by comma */
          fields?: string;
        };
      };
      responses: {
        /** An Object */
        200: {
          schema: definitions["market-data"];
        };
        /** Authentication failed */
        401: unknown;
        /** System failed */
        500: unknown;
      };
    };
  };
  "/portfolio/accounts": {
    /** In non-tiered account structures, returns a list of accounts for which the user can view position and account information. This endpoint must be called prior  to calling other /portfolio endpoints for those accounts. For querying a list of accounts  which the user can trade, see /iserver/accounts. For a list of subaccounts in tiered  account structures (e.g. financial advisor or ibroker accounts) see /portfolio/subaccounts. */
    get: {
      responses: {
        /** An array */
        200: {
          schema: definitions["accounts"];
        };
      };
    };
  };
  "/portfolio/subaccounts": {
    /** Used in tiered account structures (such as financial advisor and ibroker accounts)  to return a list of sub-accounts for which the user can view position and  account-related information. This endpoint must be called prior to calling other  /portfolio endpoints for those subaccounts.  To query a list of accounts the user can trade, see /iserver/accounts. */
    get: {
      responses: {
        /** An array */
        200: {
          schema: definitions["account"];
        };
      };
    };
  };
  "/portfolio/{accountId}/meta": {
    /** Account information related to account Id /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint. */
    get: {
      parameters: {
        path: {
          /** account id */
          accountId: string;
        };
      };
      responses: {
        /** An object */
        200: {
          schema: definitions["accounts"];
        };
      };
    };
  };
  "/portfolio/{accountId}/allocation": {
    /** Information about the account's portfolio allocation by Asset Class, Industry and Category.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint. */
    get: {
      parameters: {
        path: {
          /** account id */
          accountId: string;
        };
      };
      responses: {
        /** returns an object of three different allocations */
        200: {
          schema: definitions["allocation"];
        };
      };
    };
  };
  "/portfolio/allocation": {
    /** Similar to /portfolio/{accountId}/allocation but returns a consolidated view of of all the accounts returned by /portfolio/accounts. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint. */
    post: {
      parameters: {
        body: {
          /** accounts info */
          body: {
            acctIds?: string[];
          };
        };
      };
      responses: {
        /** returns an object of three different allocations */
        200: {
          schema: definitions["allocation"];
        };
      };
    };
  };
  "/portfolio/{accountId}/positions/{pageId}": {
    /** Returns a list of positions for the given account. The endpoint supports paging, page's default size is 30 positions. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint. */
    get: {
      parameters: {
        path: {
          /** account id */
          accountId: string;
          /** page id */
          pageId: string;
        };
        query: {
          /** optional */
          model?: string;
          /** declare the table to be sorted by which column */
          sort?: string;
          /** in which order, a means ascending - d means descending */
          direction?: string;
          /** period for pnl column, can be 1D, 7D, 1M... */
          period?: string;
        };
      };
      responses: {
        /** returns a list of positions in the portfolio */
        200: {
          schema: definitions["position"];
        };
      };
    };
  };
  "/portfolio/{accountId}/position/{conid}": {
    /** Returns a list of all positions matching the conid. For portfolio models the conid could be in more than one model, returning an array with the name of the model it belongs to.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint. */
    get: {
      parameters: {
        path: {
          /** account id */
          accountId: string;
          /** contract id */
          conid: number;
        };
      };
      responses: {
        /** returns a list containing only one position for the conid */
        200: {
          schema: definitions["position"];
        };
      };
    };
  };
  "/portfolio/{accountId}/positions/invalidate": {
    post: {
      parameters: {
        path: {
          /** account id */
          accountId: string;
        };
      };
      responses: {
        /** Means successful */
        200: {
          schema: { [key: string]: unknown };
        };
      };
    };
  };
  "/portfolio/{accountId}/summary": {
    /** Returns information about margin, cash balances and other information related to specified account. See also /portfolio/{accountId}/ledger. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint. */
    get: {
      parameters: {
        path: {
          /** account id */
          accountId: string;
        };
      };
      responses: {
        /** returns an object containing account summary. The object contains multiple properties. A property is sufficed with -c if its provides commodity value, -s if it provides security value and -c if its UKL segment value */
        200: {
          schema: {
            accountready?: definitions["summary"];
            accounttype?: definitions["summary"];
            accruedcash?: definitions["summary"];
            "accruedcash-c"?: definitions["summary"];
            "accruedcash-f"?: definitions["summary"];
            "accruedcash-s"?: definitions["summary"];
            accrueddividend?: definitions["summary"];
            "accrueddividend-c"?: definitions["summary"];
            "accrueddividend-f"?: definitions["summary"];
            "accrueddividend-s"?: definitions["summary"];
            availablefunds?: definitions["summary"];
            "availablefunds-c"?: definitions["summary"];
            "availablefunds-f"?: definitions["summary"];
            "availablefunds-s"?: definitions["summary"];
            billable?: definitions["summary"];
            "billable-c"?: definitions["summary"];
            "billable-f"?: definitions["summary"];
            "billable-s"?: definitions["summary"];
            buyingpower?: definitions["summary"];
            cushion?: definitions["summary"];
            daytradesremaining?: definitions["summary"];
            "daytradesremainingt+1"?: definitions["summary"];
            "daytradesremainingt+2"?: definitions["summary"];
            "daytradesremainingt+3"?: definitions["summary"];
            "daytradesremainingt+4"?: definitions["summary"];
            equitywithloanvalue?: definitions["summary"];
            "equitywithloanvalue-c"?: definitions["summary"];
            "equitywithloanvalue-f"?: definitions["summary"];
            "equitywithloanvalue-s"?: definitions["summary"];
            excessliquidity?: definitions["summary"];
            "excessliquidity-c"?: definitions["summary"];
            "excessliquidity-f"?: definitions["summary"];
            "excessliquidity-s"?: definitions["summary"];
            fullavailablefunds?: definitions["summary"];
            "fullavailablefunds-c"?: definitions["summary"];
            "fullavailablefunds-f"?: definitions["summary"];
            "fullavailablefunds-s"?: definitions["summary"];
            fullexcessliquidity?: definitions["summary"];
            "fullexcessliquidity-c"?: definitions["summary"];
            "fullexcessliquidity-f"?: definitions["summary"];
            "fullexcessliquidity-s"?: definitions["summary"];
            fullinitmarginreq?: definitions["summary"];
            "fullinitmarginreq-c"?: definitions["summary"];
            "fullinitmarginreq-f"?: definitions["summary"];
            "fullinitmarginreq-s"?: definitions["summary"];
            fullmaintmarginreq?: definitions["summary"];
            "fullmaintmarginreq-c"?: definitions["summary"];
            "fullmaintmarginreq-f"?: definitions["summary"];
            "fullmaintmarginreq-s"?: definitions["summary"];
            grosspositionvalue?: definitions["summary"];
            "grosspositionvalue-c"?: definitions["summary"];
            "grosspositionvalue-f"?: definitions["summary"];
            "grosspositionvalue-s"?: definitions["summary"];
            guarantee?: definitions["summary"];
            "guarantee-c"?: definitions["summary"];
            "guarantee-f"?: definitions["summary"];
            "guarantee-s"?: definitions["summary"];
            highestseverity?: definitions["summary"];
            "highestseverity-c"?: definitions["summary"];
            "highestseverity-f"?: definitions["summary"];
            "highestseverity-s"?: definitions["summary"];
            indianstockhaircut?: definitions["summary"];
            "indianstockhaircut-c"?: definitions["summary"];
            "indianstockhaircut-f"?: definitions["summary"];
            "indianstockhaircut-s"?: definitions["summary"];
            initmarginreq?: definitions["summary"];
            "initmarginreq-c"?: definitions["summary"];
            "initmarginreq-f"?: definitions["summary"];
            "initmarginreq-s"?: definitions["summary"];
            leverage?: definitions["summary"];
            "leverage-c"?: definitions["summary"];
            "leverage-f"?: definitions["summary"];
            "leverage-s"?: definitions["summary"];
            lookaheadavailablefunds?: definitions["summary"];
            "lookaheadavailablefunds-c"?: definitions["summary"];
            "lookaheadavailablefunds-f"?: definitions["summary"];
            "lookaheadavailablefunds-s"?: definitions["summary"];
            lookaheadexcessliquidity?: definitions["summary"];
            "lookaheadexcessliquidity-c"?: definitions["summary"];
            "lookaheadexcessliquidity-f"?: definitions["summary"];
            "lookaheadexcessliquidity-s"?: definitions["summary"];
            lookaheadinitmarginreq?: definitions["summary"];
            "lookaheadinitmarginreq-c"?: definitions["summary"];
            "lookaheadinitmarginreq-f"?: definitions["summary"];
            "lookaheadinitmarginreq-s"?: definitions["summary"];
            lookaheadmaintmarginreq?: definitions["summary"];
            "lookaheadmaintmarginreq-c"?: definitions["summary"];
            "lookaheadmaintmarginreq-f"?: definitions["summary"];
            "lookaheadmaintmarginreq-s"?: definitions["summary"];
            lookaheadnextchange?: definitions["summary"];
            maintmarginreq?: definitions["summary"];
            "maintmarginreq-c"?: definitions["summary"];
            "maintmarginreq-f"?: definitions["summary"];
            "maintmarginreq-s"?: definitions["summary"];
            netliquidation?: definitions["summary"];
            "netliquidation-c"?: definitions["summary"];
            "netliquidation-f"?: definitions["summary"];
            "netliquidation-s"?: definitions["summary"];
            netliquidationuncertainty?: definitions["summary"];
            nlvandmargininreview?: definitions["summary"];
            pasharesvalue?: definitions["summary"];
            "pasharesvalue-c"?: definitions["summary"];
            "pasharesvalue-f"?: definitions["summary"];
            "pasharesvalue-s"?: definitions["summary"];
            postexpirationexcess?: definitions["summary"];
            "postexpirationexcess-c"?: definitions["summary"];
            "postexpirationexcess-f"?: definitions["summary"];
            "postexpirationexcess-s"?: definitions["summary"];
            postexpirationmargin?: definitions["summary"];
            "postexpirationmargin-c"?: definitions["summary"];
            "postexpirationmargin-f"?: definitions["summary"];
            "postexpirationmargin-s"?: definitions["summary"];
            previousdayequitywithloanvalue?: definitions["summary"];
            "previousdayequitywithloanvalue-c"?: definitions["summary"];
            "previousdayequitywithloanvalue-f"?: definitions["summary"];
            "previousdayequitywithloanvalue-s"?: definitions["summary"];
            "segmenttitle-c"?: definitions["summary"];
            "segmenttitle-f"?: definitions["summary"];
            "segmenttitle-s"?: definitions["summary"];
            totalcashvalue?: definitions["summary"];
            "totalcashvalue-c"?: definitions["summary"];
            "totalcashvalue-f"?: definitions["summary"];
            "totalcashvalue-s"?: definitions["summary"];
            totaldebitcardpendingcharges?: definitions["summary"];
            "totaldebitcardpendingcharges-c"?: definitions["summary"];
            "totaldebitcardpendingcharges-f"?: definitions["summary"];
            "totaldebitcardpendingcharges-s"?: definitions["summary"];
            "tradingtype-f"?: definitions["summary"];
            "tradingtype-s"?: definitions["summary"];
          };
        };
      };
    };
  };
  "/portfolio/{accountId}/ledger": {
    /** Information regarding settled cash, cash balances, etc. in the account's base currency and any other cash balances hold in other currencies.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint. The list of supported currencies is available at https://www.interactivebrokers.com/en/index.php?f=3185. */
    get: {
      parameters: {
        path: {
          /** account id */
          accountId: string;
        };
      };
      responses: {
        /** 200 means successful */
        200: {
          schema: {
            BASE?: definitions["ledger"];
          };
        };
      };
    };
  };
  "/portfolio/positions/{conid}": {
    /** Returns an object of all positions matching the conid for all the selected accounts. For portfolio models the conid could be in more than one model, returning an array with the name of the model it belongs to. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint. */
    get: {
      parameters: {
        path: {
          /** contract id */
          conid: number;
        };
      };
      responses: {
        /** returns an object containing account and its position information */
        200: {
          schema: {
            ACCTID?: definitions["position"];
          };
        };
      };
    };
  };
  "/ibcust/entity/info": {
    /** Returns Applicant Id with all owner related entities */
    get: {
      responses: {
        /** Search result */
        200: {
          schema: {
            applicantId?: number;
            entities?: {
              canTrade?: boolean;
              canSign?: boolean;
              type?: string;
              name?: {
                salutation?: string;
                firstName?: string;
                lastName?: string;
              };
              address?: {
                street?: string;
                street2?: string;
                city?: string;
                state?: string;
                postalCode?: string;
                country?: string;
                countryCode?: string;
                compact?: string;
              };
              identDocs?: {
                country?: string;
                state?: string;
                type?: string;
                value?: string;
              }[][];
            }[];
          }[];
        };
      };
    };
  };
  "/pa/performance": {
    /** Returns the performance (MTM) for the given accounts, if more than one account is passed, the result is consolidated. */
    post: {
      parameters: {
        body: {
          /** an array of account ids */
          body: {
            acctIds?: string[];
            /**
             * @description Frequency of cumulative performance data points: 'D'aily, 'M'onthly,'Q'uarterly.
             *
             * @enum {string}
             */
            freq?: "D" | "M" | "Q";
          };
        };
      };
      responses: {
        /** returns an object */
        200: {
          schema: definitions["performance"];
        };
      };
    };
  };
  "/pa/summary": {
    /** Returns a summary of all account balances for the given accounts, if more than one account is passed, the result is consolidated. */
    post: {
      parameters: {
        body: {
          /** an array of account ids */
          body: {
            acctIds?: string[];
          };
        };
      };
      responses: {
        /** returns an object */
        200: {
          schema: definitions["summary"];
        };
      };
    };
  };
  "/pa/transactions": {
    /**
     * transaction history for a given number of conids and accounts.
     * Types of transactions include dividend payments, buy and sell transactions, transfers.
     */
    post: {
      parameters: {
        body: {
          body: {
            acctIds?: string[];
            conids?: number[];
            /**
             * @description optional defaults to USD.
             * @example USD
             */
            currency?: string;
            /**
             * @description optional, default value is 90
             * @example 7
             */
            days?: number;
          };
        };
      };
      responses: {
        /** returns an object */
        200: {
          schema: definitions["transactions"];
        };
      };
    };
  };
  "/fyi/unreadnumber": {
    /** Returns the total number of unread fyis */
    get: {
      responses: {
        /** An object */
        200: {
          schema: {
            /** @description unread number */
            BN?: number;
          };
        };
      };
    };
  };
  "/fyi/settings": {
    /** Return the current choices of subscriptions, we can toggle the option */
    get: {
      responses: {
        /** An array */
        200: {
          schema: {
            /** @description optional, if A doesn't exist, it means user can't toggle this option. 0-off, 1-on. */
            A?: number;
            /** @description fyi code */
            FC?: string;
            /** @description disclaimer read, 1 = yes, = 0 no. */
            H?: number;
            /** @description detailed description */
            FD?: string;
            /** @description title */
            FN?: string;
          }[];
        };
      };
    };
  };
  "/fyi/settings/{typecode}": {
    /** Configure which typecode you would like to enable/disable. */
    post: {
      parameters: {
        path: {
          /** fyi code */
          typecode: string;
        };
        body: {
          body: {
            enabled?: boolean;
          };
        };
      };
      responses: {
        /** 200 means successful */
        200: {
          schema: { [key: string]: unknown };
        };
      };
    };
  };
  "/fyi/disclaimer/{typecode}": {
    get: {
      parameters: {
        path: {
          /** fyi code, for example --M8, EA */
          typecode: string;
        };
      };
      responses: {
        /** receives the disclaimer message */
        200: {
          schema: {
            /** @description disclaimer message */
            DT?: string;
            /** @description fyi code */
            FC?: string;
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** fyi code, for example --M8, EA */
          typecode: string;
        };
      };
      responses: {
        /** 200 means successful */
        200: {
          schema: {
            T?: number;
            V?: number;
          };
        };
      };
    };
  };
  "/fyi/deliveryoptions": {
    /** options for sending fyis to email and other devices */
    get: {
      responses: {
        /** An object */
        200: {
          schema: {
            /** @description Email option is enabled or not 0-off, 1-on. */
            M?: number;
            E?: {
              /** @description device name */
              NM?: string;
              /** @description device id */
              I?: string;
              /** @description unique device id */
              UI?: string;
              /** @description device is enabled or not 0-true, 1-false. */
              A?: string;
            }[];
          };
        };
      };
    };
  };
  "/fyi/deliveryoptions/email": {
    put: {
      parameters: {
        query: {
          /** true/false */
          enabled: string;
        };
      };
      responses: {
        /** 200 means successful */
        200: {
          schema: {
            T?: number;
            V?: number;
          };
        };
      };
    };
  };
  "/fyi/deliveryoptions/device": {
    post: {
      parameters: {
        body: {
          /** device info */
          body: {
            devicename?: string;
            deviceId?: string;
            uiName?: string;
            enabled?: boolean;
          };
        };
      };
      responses: {
        /** 200 means successful */
        200: {
          schema: {
            T?: number;
            V?: number;
          };
        };
      };
    };
  };
  "/fyi/deliveryoptions/{deviceId}": {
    delete: {
      parameters: {
        path: {
          /** device ID */
          deviceId: string;
        };
      };
      responses: {
        /** 200 means successful */
        200: {
          schema: { [key: string]: unknown };
        };
      };
    };
  };
  "/fyi/notifications": {
    get: {
      parameters: {
        query: {
          /** if set, don't set include */
          exclude?: string;
          /** if set, don't set exclude */
          include?: string;
          /** max number of fyis in response */
          max: string;
        };
      };
      responses: {
        /** An array */
        200: {
          schema: definitions["notifications"];
        };
      };
    };
  };
  "/fyi/notifications/more": {
    get: {
      parameters: {
        query: {
          /** id of last notification in the list */
          id: string;
        };
      };
      responses: {
        /** An array */
        200: {
          schema: definitions["notifications"];
        };
      };
    };
  };
  "/fyi/notifications/{notificationId}": {
    put: {
      parameters: {
        path: {
          /** mark a notification read */
          notificationId: string;
        };
      };
      responses: {
        /** when 200 receives, it means successful */
        200: {
          schema: { [key: string]: unknown };
        };
      };
    };
  };
  "/sso/validate": {
    /** Validates the current session for the SSO user */
    get: {
      responses: {
        /** An Object */
        200: {
          schema: {
            /** @description 1 for Live, 2 for Paper */
            LOGIN_TYPE?: number;
            /** @description Username */
            USER_NAME?: string;
            /** @description User ID */
            USER_ID?: number;
            /** @description Time in milliseconds until session expires. Caller needs to call the again to re-validate session */
            expire?: number;
            /** @description true if session was validated; false if not. */
            RESULT?: boolean;
            /** @description Time of session validation */
            AUTH_TIME?: number;
          };
        };
        /** Authentication failed */
        401: unknown;
        /** System failed */
        500: unknown;
      };
    };
  };
}

export interface definitions {
  "position-data": {
    conid?: number;
    position?: number;
    avgCost?: number;
  };
  "order-data": {
    clientOrderId?: string;
    /** @description ResultVerified or EventCancelled */
    wagerEoL?: string;
    execId?: string;
    execType?: string;
    /** @enum {string} */
    orderType?: '1 "Market"' | '2 "Limit"' | '3 "Stop"' | '4 "Stop Limit"';
    /** @enum {string} */
    orderStatus?:
      | '-1 "Invalid Order Status"'
      | '0 "New"'
      | '1 "Partially Filled"'
      | '2 "Filled"'
      | '3 "Done for the Day"'
      | '4 "Cancelled"'
      | '5 "Replaced"'
      | '6 "Pending Cancel Replace"'
      | '7 "Stopped"'
      | '8 "Rejected"'
      | '9 "Suspended"'
      | 'A "Pending New"'
      | 'B "Calculated"'
      | 'C "Expired"'
      | 'D "Pending Cancel"'
      | 'E "Pending Replace"';
    symbol?: string;
    orderQty?: string;
    price?: string;
    lastShares?: string;
    lastPrice?: string;
    cumQty?: string;
    leavesQty?: string;
    avgPrice?: string;
    side?: string;
    orderId?: string;
    account?: string;
    secType?: string;
    txTime?: string;
    rcptTime?: string;
    tif?: string;
    conid?: string;
    currency?: string;
    exchange?: string;
    listingExchange?: string;
    text?: number;
    warnings?: {
      PRICECAP?: string;
      TIME?: string;
    };
    /** @description Commission currency */
    commCurr?: string;
    /** @description Commissions */
    comms?: string;
    /** @description Realized PnL */
    realizedPnl?: string;
  };
  wagers: {
    conid?: number;
    curr?: string;
    desc?: string;
    part?: string;
  }[];
  inds: {
    conid?: number;
  }[];
  secdef: {
    /** @description IBKR contract identifier. */
    conid?: number;
    /** @description Currency contract trades in. */
    currency?: string;
    /** @description Defines if a derivative contract has a different currency. */
    crossCurrency?: boolean;
    time?: number;
    /** @description HTML encoded company description in Chinese. */
    chineseName?: string;
    /** @description List of exchanges and venues contract trades. */
    allExchanges?: string;
    /** @description Main trading venue. */
    listingExchange?: string;
    /** @description Company Name. */
    name?: string;
    /** @description Group of financial instruments which have similar financial characteristics and behave similar in the marketplace. */
    assetClass?: string;
    /** @description Specific data contract expires. */
    expiry?: string;
    /** @description Final day derivative contract can be traded before delivery of the underlying asset or cash settlement. */
    lastTradingDay?: string;
    /** @description Potential characteristic of each product. */
    group?: string;
    /** @description Defines the right to buy or sell of the underlying security. */
    putOrCall?: string;
    /** @description The category of the economy. */
    sector?: string;
    /** @description Stock Group contract belongs too. */
    sectorGroup?: string;
    /** @description Set price at which a derivative contract can be bought or sold. */
    strike?: number;
    /** @description Contract symbol. */
    ticker?: string;
    /** @description Underlying contract identifier. */
    undConid?: number;
    /** @description Multiplier for total premium paid or received for derivative contract. */
    multiplier?: number;
    /** @description Stock type. */
    type?: string;
    /** @description Company name for underlying contract. */
    undComp?: string;
    /** @description IBKR Symbol for underlying contract. */
    undSym?: string;
    /** @description If contract has an option. */
    hasOptions?: boolean;
    /** @description Formatted company name with underlying symbol, expiration, strike, right. */
    fullName?: string;
    /** @description If contract is a US contract. Currently supported for stocks, options and warrants. */
    isUS?: boolean;
    /** @description Price increment value contract trades. */
    incrementRules?: {
      /** @description The minimum contract price on the market that supports the specified increment. */
      lowerEdge?: number;
      /** @description The minimum increment value for contract price. */
      increment?: number;
    };
  }[];
  futures: {
    symbol?: string;
    /** @description conid of the future contract */
    conid?: number;
    underlyingConid?: number;
    expirationDate?: string;
    /** @description last trading day */
    ltd?: string;
  }[];
  /** @description This is an array of object(s), there could be multiple results under same symbol */
  stocks: {
    /** @description company name */
    name?: string;
    /** @description company name in Chinese */
    chineseName?: string;
    /** @example STK */
    assetClass?: string;
    /** @description array of contracts from different exchanges */
    contracts?: {
      /** @description conid of the stock contract */
      conid?: number;
      /** @example NYSE */
      exchange?: string;
    }[];
  }[];
  "alert-request": {
    /** @description orderId is required when modifying alert. You can get it from /iserver/account/:accountId/alerts */
    orderId?: number;
    /** @description name of alert */
    alertName?: string;
    /** @description The message you want to receive via email or text message */
    alertMessage?: string;
    /** @description whether alert is repeatable or not, so value can only be 0 or 1, this has to be 1 for MTA alert */
    alertRepeatable?: number;
    /** @description email address to receive alert */
    email?: string;
    /** @description whether allowing to send email or not, so value can only be 0 or 1, */
    sendMessage?: number;
    /** @description time in force, can only be GTC or GTD */
    tif?: string;
    /**
     * @description format, YYYYMMDD-HH:mm:ss, please NOTE this will only work when tif is GTD
     *
     * @example 20201105-19:51:14
     */
    expireTime?: string;
    /** @description value can only be 0 or 1, set to 1 if the alert can be triggered outside regular trading hours. */
    outsideRth?: number;
    /** @description value can only be 0 or 1, set to 1 to enable the alert only in IBKR mobile */
    iTWSOrdersOnly?: number;
    /** @description value can only be 0 or 1, set to 1 to allow to show alert in pop-ups */
    showPopup?: number;
    /** @description for MTA alert only, each user has a unique toolId and it will stay the same, do not send for normal alert */
    toolId?: number;
    /** @description audio message to play when alert is triggered */
    playAudio?: string;
    conditions?: {
      /** @description Types: 1-Price, 3-Time, 4-Margin, 5-Trade, 6-Volume, 7: MTA market 8: MTA Position, 9: MTA Acc. Daily PN& */
      type?: number;
      /**
       * @description conid and exchange. Format supports conid or conid@exchange
       * @example 8314@SMART
       */
      conidex?: string;
      /**
       * @description optional, operator for the current condition, can be >= or <=
       * @example >=
       */
      operator?: string;
      /**
       * @description optional, only some type of conditions have triggerMethod
       * @example 0
       */
      triggerMethod?: string;
      /**
       * @description can not be empty, can pass default value "*"
       * @example 220
       */
      value?: string;
      /**
       * @description "a" means "AND", "o" means "OR", "n" means "END",
       * the last one condition in the condition array should "n"
       */
      logicBind?: string;
      /** @description only needed for some MTA alert condition */
      timeZone?: string;
    }[];
  };
  "alert-response": {
    /** @description account id */
    account?: string;
    order_id?: number;
    /** @description name of alert */
    alert_name?: string;
    /** @description The message you want to receive via email or text message */
    alert_message?: string;
    /** @description whether alert is active or not, so value can only be 0 or 1 */
    alert_active?: number;
    /** @description whether alert is repeatable or not, so value can only be 0 or 1 */
    alert_repeatable?: number;
    /** @description email address to receive alert */
    alert_email?: string;
    /** @description whether allowing to send email or not, so value can only be 0 or 1, */
    alert_send_message?: number;
    /** @description time in force, can only be GTC or GTD */
    tif?: string;
    /**
     * @description format, YYYYMMDD-HH:mm:ss
     *
     * @example 20201105-19:51:14
     */
    expire_time?: string;
    /**
     * @description status of alert
     * @example Submitted
     */
    order_status?: string;
    /** @description value can only be 0 or 1, set to 1 if the alert can be triggered outside regular trading hours. */
    outsideRth?: number;
    /** @description value can only be 0 or 1, set to 1 to enable the alert only in IBKR mobile */
    itws_orders_only?: number;
    /** @description value can only be 0 or 1, set to 1 to allow to show alert in pop-ups */
    alert_show_popup?: number;
    /** @description whether the alert has been triggered */
    alert_triggered?: boolean;
    /** @description whether the alert can be edited */
    order_not_editable?: boolean;
    /** @description for MTA alert only, each user has a unique toolId and it will stay the same, do not send for normal alert */
    tool_id?: number;
    /** @description audio message to play when alert is triggered */
    alert_play_audio?: string;
    /** @description MTA alert only */
    alert_mta_currency?: string;
    /** @description MTA alert only */
    alert_mta_defaults?: string;
    /** @description MTA alert only */
    time_zone?: string;
    /** @description MTA alert only */
    alert_default_type?: string;
    /** @description size of conditions array */
    condition_size?: number;
    /** @description whether allowing the condition can be triggered outside of regular trading hours, 1 means allow */
    condition_outside_rth?: number;
    conditions?: {
      /** @description Types: 1-Price, 3-Time, 4-Margin, 5-Trade, 6-Volume, 7: MTA market 8: MTA Position, 9: MTA Acc. Daily PN& */
      condition_type?: number;
      /**
       * @description conid and exchange. Format supports conid or conid@exchange
       * @example 8314@SMART
       */
      conidex?: string;
      /**
       * @description Format contract name
       * @example FB Stock (NASDAQ.NMS)
       */
      contract_description_1?: string;
      /**
       * @description optional, operator for the current condition
       *   * >= Greater than or equal to
       *   * <= Less than or equal to
       *
       * @example - >= - <=
       */
      condition_operator?: string;
      /**
       * @description optional, only some type of conditions have triggerMethod
       * @example 0
       */
      condition_trigger_method?: string;
      /**
       * @description can not be empty, can pass default value "*"
       * @example 220
       */
      condition_value?: string;
      /**
       * @description Condition array should end with "n"
       *   * a - AND
       *   * o - OR
       *   * n - END
       */
      condition_logic_bind?: string;
      /** @description only needed for some MTA alert condition */
      condition_time_zone?: string;
    }[];
  };
  authStatus: {
    /** @description Brokerage session is authenticated */
    authenticated?: boolean;
    /** @description Connected to backend */
    connected?: boolean;
    /** @description Brokerage session is competing, e.g. user is logged in to IBKR Mobile, WebTrader, TWS or other trading platforms. */
    competing?: boolean;
    /** @description Authentication failed, why. */
    fail?: string;
    /** @description System messages that may affect trading */
    message?: string;
    /** @description Prompt messages that may affect trading or the account */
    prompts?: string[];
  };
  /** @description Contains all details of the contract, including rules you can use when placing orders */
  contract: {
    /** @description true means you can trade outside RTH(regular trading hours) */
    r_t_h?: boolean;
    /** @description same as that in request */
    con_id?: string;
    /** @description Contracts company name */
    company_name?: string;
    exchange?: string;
    /** @description for exmple FB */
    local_symbol?: string;
    /** @description for example STK */
    instrument_type?: string;
    currency?: string;
    companyName?: string;
    category?: string;
    industry?: string;
    rules?: {
      orderTypes?: string[];
      orderTypesOutside?: string[];
      /** @description default quantity you can use to place an order */
      defaultSize?: number;
      sizeIncrement?: number;
      tifTypes?: string[];
      /** @description default limit price you can use to prefill your order */
      limitPrice?: number;
      /** @description default stop price you can use to prefill your order */
      stopprice?: number;
      /** @description if you can preview the order or not with the whatif endpoint */
      preview?: boolean;
      displaySize?: string;
      increment?: string;
    };
  };
  /** @description Contains some basic info of contract */
  "secdef-info": {
    /** @description IBKR contract identifier */
    conid?: number;
    /** @description Underlying symbol */
    symbol?: string;
    /** @description Security type */
    secType?: string;
    /** @description Primary Exchange, Routing or Trading Venue */
    exchange?: string;
    /** @description Main Trading Venue */
    listingExchange?: string;
    /** @description Put or Call of the option. C = Call Option, P = Put Option */
    right?: string;
    /** @description Set price at which a derivative contract can be bought or sold. The strike price also known as exercise price. */
    strike?: number;
    /** @description Currency the contract trades in */
    currency?: string;
    /** @description Committee on Uniform Securities Identification Procedures number */
    cusip?: string;
    /** @description Annual interest rate paid on a bond */
    coupon?: string;
    /** @description Currency pairs for Forex e.g. EUR.AUD, EUR.CAD, EUR.CHF etc. */
    desc1?: string;
    /** @description Formatted expiration, strike and right */
    desc2?: string;
    /** @description Format YYYYMMDD, the date on which the underlying transaction settles if the option is exercised */
    maturityDate?: number;
    /** @description Multiplier for total premium paid or received for derivative contract. */
    multiplier?: string;
    /** @description Designation of the contract. */
    tradingClass?: string;
    /** @description Comma separated list of exchanges or trading venues. */
    validExchanges?: string;
  };
  "history-data": {
    /** @description Underlying symbol */
    symbol?: string;
    /** @description companyName */
    text?: string;
    /**
     * @description priceFactor is price increment obtained from display rule
     * @example 100
     */
    priceFactor?: number;
    /** @description start date time in the format YYYYMMDD-HH:mm:ss */
    startTime?: string;
    /**
     * @description High value during this time series with format %h/%v/%t. %h is the high price (scaled by priceFactor), %v is volume
     * (volume factor will always be 100 (reported volume = actual volume/100)) and %t is minutes from start time of the chart
     */
    high?: string;
    /**
     * @description Low value during this time series with format %l/%v/%t. %l is the low price (scaled by priceFactor), %v is volume
     * (volume factor will always be 100 (reported volume = actual volume/100)) and %t is minutes from start time of the chart
     */
    low?: string;
    /** @description The duration for the historical data request */
    timePeriod?: string;
    /** @description The number of seconds in a bar */
    barLength?: number;
    /**
     * @description Market Data Availability. The field may contain two chars. The first char is the primary code: S = Streaming, R = Realtime, D = Delayed,
     * Z = Frozen, Y = Frozen Delayed. The second char is the secondary code: P = Snapshot Available, p = Consolidated.
     */
    mdAvailability?: string;
    /** @description The time it takes, in milliseconds, to process the historical data request */
    mktDataDelay?: number;
    /** @description The historical data returned includes outside of regular trading hours */
    outsideRth?: boolean;
    /** @description The number of seconds in the trading day */
    tradingDayDuration?: number;
    volumeFactor?: number;
    priceDisplayRule?: number;
    priceDisplayValue?: string;
    negativeCapable?: boolean;
    messageVersion?: number;
    data?: {
      /** @description open price */
      o?: number;
      /** @description close price */
      c?: number;
      /** @description high price */
      h?: number;
      /** @description low price */
      l?: number;
      /** @description volume */
      v?: number;
      /** @description unix time stamp */
      t?: number;
    }[];
    /** @description total number of points */
    points?: number;
    travelTime?: number;
  };
  trade: {
    /** @description execution identifier for the order */
    execution_id?: string;
    /** @description Underlying Symbol */
    symbol?: string;
    /**
     * @description The side of the market of the order.
     *   * B - Buy contract near posted ask price
     *   * S - Sell contract near posted bid price
     *   * X - Option expired
     *
     * @enum {string}
     */
    side?: "B" | "S" | "X";
    /** @description Formatted description of the order "%side% %size% @ %price% on %exchange%". */
    order_description?: string;
    /** @description Time of Status update in format "YYYYMMDD-hh:mm:ss". */
    trade_time?: string;
    /** @description Time of status update in format unix time. */
    trade_time_r?: number;
    /** @description Quantity of the order */
    size?: string;
    /** @description Average Price */
    price?: string;
    /** @description User defined string used to identify the order. Value is set using "cOID" field while placing an order. */
    order_ref?: string;
    /** @description User that submitted order */
    submitter?: string;
    /** @description Exchange or venue of order */
    exchange?: string;
    /** @description Commission of the order */
    commission?: number;
    /** @description Net cost of the order, including contract multiplier and quantity. */
    net_amount?: number;
    /** @description accountCode */
    account?: string;
    /** @description Account Number */
    acountCode?: string;
    /** @description Contracts company name */
    company_name?: string;
    /**
     * @description Format contract name
     * @example FB Stock (NASDAQ.NMS)
     */
    contract_description_1?: string;
    /**
     * @description Asset class
     * @example STK, FUT, OPT
     */
    sec_type?: string;
    /** @description IBKR's contract identifier */
    conid?: string;
    /** @description conid and exchange. Format supports conid or conid@exchange */
    conidex?: string;
    /** @description Total quantity owned for this contract */
    position?: string;
    /** @description Firm which will settle the trade. For IBExecution customers only. */
    clearing_id?: string;
    /** @description Specifies the true beneficiary of the order. For IBExecution customers only. */
    clearing_name?: string;
    /** @description If order adds liquidity to the market. */
    liquidation_trade?: number;
  };
  "modify-order": {
    acctId?: string;
    conid?: number;
    /** @description for example LMT */
    orderType?: string;
    outsideRTH?: boolean;
    price?: number;
    auxPrice?: number;
    /** @description SELL or BUY */
    side?: string;
    /** @description optional, not required */
    listingExchange?: string;
    /** @description The ticker symbol of the original place order */
    ticker?: string;
    /**
     * @description Specify a time in force to change how long your order will continue to work in the market
     * @example tif = DAY to tif = GTC
     */
    tif?: string;
    /** @description usually integer, for some special cases can be float numbers */
    quantity?: number;
    /**
     * @description Set to true if you want to pause a working order.
     * For details refer to the [TWS Users' Guide:](https://guides.interactivebrokers.com/tws/twsguide.html#usersguidebook/getstarted/pause_execution.htm)
     */
    deactivated?: boolean;
  };
  "order-request": {
    /**
     * @description acctId is optional. It should be one of the accounts returned by
     * /iserver/accounts. If not passed, the first one in the list is selected.
     */
    acctId?: string;
    /**
     * @description conid is the identifier of the security you want to trade, you can find the
     * conid with /iserver/secdef/search.
     */
    conid?: number;
    /**
     * @description Conid and Exchange - Can be used instead of conid when specifying the contract identifier of a security.
     *
     * @example conidex = 265598
     */
    conidex?: string;
    /**
     * @description The contract-identifier (conid) and security type (type) specified as a concatenated value, conid:type
     * @example secType = 265598:STK
     */
    secType?: string;
    /**
     * @description Customer Order ID. An arbitrary string that can be used to identify the order, e.g "my-fb-order". The
     * value must be unique for a 24h span. Please do not set this value for child orders when placing a bracket order.
     */
    cOID?: string;
    /** @description Only specify for child orders when placing bracket orders. The parentId for the child order(s) must be equal to the cOId (customer order id) of the parent. */
    parentId?: string;
    /**
     * @description The order-type determines what type of order you want to send.
     *   * LMT - A limit order is an order to buy or sell at the specified price or better.
     *   * MKT - A market order is an order to buy or sell at the markets current NBBO.
     *   * STP - A stop order becomes a market order once the specified stop price is attained or penetrated.
     *   * STOP_LIMIT - A stop limit order becomes a limit order once the specified stop price is attained or penetrated.
     *   * MIDPRICE - A MidPrice order attempts to fill at the current midpoint of the NBBO or better.
     *   * TRAIL - A sell trailing stop order sets the stop price at a fixed amount below the market price with an attached "trailing" amount. See more details here: https://ndcdyn.interactivebrokers.com/en/index.php?f=605
     *   * TRAILLMT - A trailing stop limit order is designed to allow an investor to specify a limit on the maximum possible loss, without setting a limit on the maximum possible gain.
     *     See more details here: https://ndcdyn.interactivebrokers.com/en/index.php?f=606
     */
    orderType?: string;
    /**
     * @description listingExchange is optional. By default we use "SMART" routing. Possible values are available via the endpoint: /iserver/contract/{conid}/info,
     * see **valid_exchange** e.g: SMART,AMEX,NYSE,CBOE,ISE,CHX,ARCA,ISLAND,DRCTEDGE,BEX,BATS,EDGEA,CSFBALGO,JE FFALGO,BYX,IEX,FOXRIVER,TPLUS1,NYSENAT,PSX
     */
    listingExchange?: string;
    /** @description set to true if you want to place a single group orders(OCA) */
    isSingleGroup?: boolean;
    /** @description set to true if the order can be executed outside regular trading hours. */
    outsideRTH?: boolean;
    /** @description optional if order is LMT, or STOP_LIMIT, this is the limit price. For STP|TRAIL this is the stop price. For MIDPRICE this is the option price cap. */
    price?: number;
    /** @description optional if order is STOP_LIMIT|TRAILLMT, this is the stop price. You must specify both price and auxPrice for STOP_LIMIT|TRAILLMT orders. */
    auxPrice?: unknown;
    /** @description SELL or BUY */
    side?: string;
    /** @description This is the  underlying symbol for the contract. */
    ticker?: string;
    /**
     * @description The Time-In-Force determines how long the order remains active on the market.
     *   * GTC - use Good-Till-Cancel for orders to remain active until it executes or cancelled.
     *   * OPG - use Open-Price-Guarantee for Limit-On-Open (LOO) or Market-On-Open (MOO) orders.
     *   * DAY - if not executed a Day order will automatically cancel at the end of the markets regular trading hours.
     *   * IOC - any portion of an Immediate-or-Cancel order that is not filled as soon as it becomes available in the market is cancelled.
     */
    tif?: string;
    /**
     * @description optional if order is TRAIL, or TRAILLMT. When trailingType is amt, this is the trailing amount, when trailingType is %, it means percentage.
     * You must specify both trailingType and trailingAmt for TRAIL and TRAILLMT order
     */
    trailingAmt?: number;
    /**
     * @description This is the trailing type for trailing amount. We only support two types here: amt or %.
     * You must specify both trailingType and trailingAmt for TRAIL and TRAILLMT order
     *
     * @example amt
     */
    trailingType?: string;
    /**
     * @description Custom order reference
     *
     * @example QuickTrade
     */
    referrer?: string;
    /**
     * @description Usually integer, for some special cases such as fractional orders can specify as a float, e.g. quantity = 0.001.
     * In some special cases quantity is not specified, such as when using 'cashQty' or 'fxQty'.
     */
    quantity?: number;
    /**
     * @description Cash Quantity - used to specify the monetary value of an order instead of the number of shares. When using 'cashQty' don't specify 'quantity'
     * Orders that express size using a monetary value, e.g. cash quantity can result in fractional shares and are provided on a non-guaranteed basis.
     * The system simulates the order by canceling it once the specified amount is spent (for buy orders) or collected (for sell orders).
     * In addition to the monetary value, the order uses a maximum size that is calculated using the Cash Quantity Estimated Factor, which can be modified in Order Presets.
     */
    cashQty?: number;
    /** @description double number, this is the cash quantity field which can only be used for Currency Conversion Orders. When using 'fxQty' don't specify 'quantity'. */
    fxQty?: number;
    /**
     * @description If true, the system will use the Price Management Algo to submit the order.
     * https://www.interactivebrokers.com/en/index.php?f=43423
     */
    useAdaptive?: boolean;
    /** @description set to true if the order is a FX conversion order */
    isCcyConv?: boolean;
    /**
     * @description Set the allocation method when placing an order using an FA account for a group
     * Possible allocation methods are "NetLiquidity", "AvailableEquity", "EqualQuantity" and "PctChange".
     */
    allocationMethod?: string;
    /** @description Specify which IB Algo algorithm to use for this order. */
    strategy?: string;
    /** @description The IB Algo parameters for the specified algorithm. */
    strategyParameters?: { [key: string]: unknown };
  };
  /** @description contains all the order related info */
  order: {
    /** @description account id */
    acct?: string;
    conid?: number;
    orderDesc?: string;
    description1?: string;
    /** @description for example FB */
    ticker?: string;
    /** @description for example STK */
    secType?: string;
    /** @description for example NASDAQ.NMS */
    listingExchange?: string;
    remainingQuantity?: string;
    filledQuantity?: string;
    companyName?: string;
    /**
     * @description * PendingSubmit - Indicates the order was sent, but confirmation has not been received that it has been received by the destination.
     *                   Occurs most commonly if an exchange is closed.
     * * PendingCancel - Indicates that a request has been sent to cancel an order but confirmation has not been received of its cancellation. * PreSubmitted - Indicates that a simulated order type has been accepted by the IBKR system and that this order has yet to be elected.
     *                  The order is held in the IBKR system until the election criteria are met. At that time the order is transmitted to the order destination as specified.
     * * Submitted - Indicates that the order has been accepted at the order destination and is working. * Cancelled - Indicates that the balance of the order has been confirmed cancelled by the IB system.
     *               This could occur unexpectedly when IB or the destination has rejected the order.
     * * Filled - Indicates that the order has been completely filled. * Inactive - Indicates the order is not working, for instance if the order was invalid and triggered an error message,
     *              or if the order was to short a security and shares have not yet been located.
     */
    status?: string;
    /** @description for example Limit */
    origOrderType?: string;
    /** @description BUY or SELL */
    side?: string;
    price?: number;
    /** @description back-ground color */
    bgColor?: string;
    fgColor?: string;
    orderId?: number;
    /** @description Only exists in child order of bracket */
    parentId?: number;
    /** @description User defined string used to identify the order. Value is set using "cOID" field while placing an order. */
    order_ref?: string;
  };
  /** @description contains all the details of an order */
  "order-status": {
    /** @description order sub-type */
    sub_type?: string;
    /** @description order request id */
    request_id?: string;
    /** @description system generated order id, unique per account */
    order_id?: number;
    /** @description conid and exchange. Format supports conid or conid@exchange */
    conidex?: string;
    /** @description Underlying symbol */
    symbol?: string;
    /**
     * @description The side of the market of the order.
     *   * B - Buy contract near posted ask price
     *   * S - Sell contract near posted bid price
     *   * X - Option expired
     *
     * @enum {string}
     */
    side?: "B" | "S" | "X";
    /**
     * @description Format contract name
     * @example FB Stock (NASDAQ.NMS)
     */
    contract_description_1?: string;
    /**
     * @description Trading Exchange or Venue
     * @example NASDAQ.NMS
     */
    listing_exchange?: string;
    option_acct?: string;
    /**
     * @description Contracts company name
     * @example APPLE INC
     */
    company_name?: string;
    /** @description Quantity updated */
    size?: string;
    /** @description Total quantity */
    total_size?: string;
    /** @description Contract traded currency */
    currency?: string;
    /** @description account id */
    account?: string;
    /**
     * @description Types of orders
     * @example LIMIT
     */
    order_type?: string;
    /** @description Limit price */
    limit_price?: string;
    /** @description Stop price */
    stop_price?: string;
    /** @description Cumulative fill */
    cum_fill?: string;
    /**
     * @description *  PendingSubmit - Indicates the order was sent, but confirmation has not been received that it has been received by the destination.
     *                    Occurs most commonly if an exchange is closed.
     * *  PendingCancel - Indicates that a request has been sent to cancel an order but confirmation has not been received of its cancellation. *  PreSubmitted - Indicates that a simulated order type has been accepted by the IBKR system and that this order has yet to be elected.
     *                   The order is held in the IBKR system until the election criteria are met. At that time the order is transmitted to the order destination as specified.
     * *  Submitted - Indicates that the order has been accepted at the order destination and is working. *  Cancelled - Indicates that the balance of the order has been confirmed cancelled by the IB system.
     *                This could occur unexpectedly when IB or the destination has rejected the order.
     * *  Filled - Indicates that the order has been completely filled. *  Inactive - Indicates the order is not working, for instance if the order was invalid and triggered an error message,
     *               or if the order was to short a security and shares have not yet been located.
     */
    order_status?: string;
    /** @description Description of the order status */
    order_status_description?: string;
    /** @description Time-in-Force - length of time order will continue working before it is canceled. */
    tif?: string;
    /** @description Foreground color in hex format */
    fg_color?: string;
    /** @description Background color in hex format */
    bg_color?: string;
    /** @description If true not allowed to modify order */
    order_not_editable?: boolean;
    /**
     * @description Fields that can be edited in escaped unicode characters
     * @example \u001E
     */
    editable_fields?: string;
    /** @description If true not allowed to cancel order */
    cannot_cancel_order?: boolean;
    /** @description If true order trades outside regular trading hours */
    outside_rth?: boolean;
    /** @description If true order is de-activated */
    deactivate_order?: boolean;
    /** @description If true price management algo is enabled, refer to https://www.interactivebrokers.com/en/index.php?f=43423 */
    use_price_mgmt_algo?: boolean;
    /**
     * @description Asset class
     * @example STK
     */
    sec_type?: string;
    /** @description List of available chart periods */
    available_chart_periods?: string;
    /**
     * @description Format description of order
     * @example BUY 100 LIMIT 125.0 DAY
     */
    order_description?: string;
    /**
     * @description order_description with the symbol
     * @example BUY 100 AAPL LIMIT 125.0 DAY
     */
    order_description_with_contract?: string;
    alert_active?: number;
    /**
     * @description type of the child order
     * @example A=attached, B=beta-hedge, etc
     */
    child_order_type?: string;
    /**
     * @description Format fillQuantity\totalQuantity
     * @example 0/9
     */
    size_and_fills?: string;
    /** @description Position display price */
    exit_strategy_display_price?: string;
    /** @description Position description to display on chart */
    exit_strategy_chart_description?: string;
    /**
     * @description * 1: If your account has position or order for contract * 0: If your account has no position or order for contract
     *
     * @enum {string}
     */
    exit_strategy_tool_availability?: 1 | 0;
    /** @description Returns true if contract supports duplicate/opposite side order. */
    allowed_duplicate_opposite?: boolean;
    /** @description Time of status update in unix time */
    order_time?: string;
    /** @description only exists for oca orders, oca orders in same group will have same id */
    oca_group_id?: string;
  };
  "scanner-params": {
    /** @description Contains list of instruments for which scanner can be ran */
    InstrumentList?: {
      /** @description Contains information like name, supported filters, etc. for an instrument */
      Instrument?: {
        /** @description Type of the asset */
        type?: string;
        /** @description Display name for the instrument */
        name?: string;
        shortName?: string;
        /** @description Sec Type of the instrument. This field is not provided if its value is same as 'type' */
        secType?: string;
        /** @description Supported filters for the instrument separated by a comma */
        filters?: string;
      }[];
    };
    /** @description Contains list of instruments for which scanner can be ran */
    LocationTree?: {
      /** @description Contains information like name, supported filters, etc. for an instrument. A location can contain more locations forming a tree-like structure which allows user to control the lcoation at more granular level. locationCode has to be used to specify lcoations while querying a scanner. */
      Location?: {
        instruments?: string;
        displayName?: string;
        locationCode?: string;
        routeExchange?: string;
      }[];
    };
    /** @description Contains list of filters supported for the scanner */
    FilterList?: { [key: string]: unknown }[];
    /** @description Contains list of scan types for which scanner can be ran */
    ScanTypeList?: {
      ScanType?: {
        /** @description Instrument types separated by a comma which are supported for this scan type */
        instruments?: string;
        displayName?: string;
        /** @description scan code which ahs to be provided while querying scanner with this scan type */
        scanCode?: string;
      }[];
    };
  };
  "set-account": {
    /** @description Account ID */
    acctId?: string;
  };
  "system-error": {
    error?: string;
  };
  "history-result": {
    bars?: {
      /** @description First price returned for bar value. */
      open?: number;
      /** @description Start Time in the format YYYYMMDD. */
      startTime?: string;
      /** @description Start Time Value - Formatted in unix time in ms. */
      startTimeVal?: number;
      /** @description End Time in the format YYYYMMDD. */
      endTime?: string;
      /** @description End Time Value - Formatted in unix time in ms. */
      endTimeVal?: number;
      /** @description total number of data points. */
      points?: number;
      data?: {
        /** @description Time - Formatted in unix time in ms. */
        t?: number;
        /** @description Open - First price returned for bar value. */
        o?: number;
        /** @description Close - Last price returned for bar value. */
        c?: number;
        /** @description High - High price returned for bar value. */
        h?: number;
        /** @description Low - Last price returned for bar value. */
        l?: number;
        /** @description Volume - Traded volume for bar value. */
        v?: number;
      }[];
      /** @description If 0 then data is returned in real time. Otherwise will return the number of seconds history data is delayed. */
      mktDataDelay?: number;
    };
  };
  "stats-data": {
    Conid?: number;
    Exchange?: string;
    V?: number;
    T?: number;
    TT?: number;
    /** @description Object, payload depends on event type. See confluence page for IGEvntUpd. */
    P?: string;
  };
  "market-data": {
    /**
     * @description Last Price - The last price at which the contract traded. May contain one of the following prefixes:
     *   * C - Previous day's closing price.
     *   * H - Trading has halted.
     */
    "31"?: string;
    /** @description High - Current day high price */
    "70"?: number;
    /** @description Low - Current day low price */
    "71"?: number;
    /** @description Change - The difference between the last price and the close on the previous trading day */
    "82"?: string;
    /** @description Change % - The difference between the last price and the close on the previous trading day in percentage. */
    "83"?: number;
    /** @description Bid Price - The highest-priced bid on the contract. */
    "84"?: string;
    /** @description Ask Size - The number of contracts or shares offered at the ask price. For US stocks, the number displayed is divided by 100. */
    "85"?: string;
    /** @description Ask Price - The lowest-priced offer on the contract. */
    "86"?: string;
    /** @description Volume - Volume for the day, formatted with 'K' for thousands or 'M' for millions. For higher precision volume refer to field 7762. */
    "87"?: string;
    /** @description Bid Size - The number of contracts or shares bid for at the bid price. For US stocks, the number displayed is divided by 100. */
    "88"?: string;
    /**
     * @description Market Data Availability. The field may contain three chars. First char defines: R = RealTime, D = Delayed,
     * Z = Frozen, Y = Frozen Delayed, N = Not Subscribed. Second char defines: P = Snapshot, p = Consolidated.
     * Third char defines: B = Book
     *   * RealTime - Data is relayed back in real time without delay, market data subscription(s) are required.
     *   * Delayed - Data is relayed back 15-20 min delayed.
     *   * Frozen - Last recorded data at market close, relayed back in real time.
     *   * Frozen Delayed - Last recorded data at market close, relayed back delayed.
     *   * Not Subscribed - User does not have the required market data subscription(s) to relay back either real time or delayed data.
     *   * Snapshot - Snapshot request is available for contract.
     *   * Consolidated - Market data is aggregated across multiple exchanges or venues.
     *   * Book - Top of the book data is available for contract.
     */
    "6509"?: string;
    /** @description Ask Exch - Displays the exchange(s) offering the SMART price. A=AMEX, C=CBOE, I=ISE, X=PHLX, N=PSE, B=BOX, Q=NASDAQOM, Z=BATS, W=CBOE2, T=NASDAQBX, M=MIAX, H=GEMINI, E=EDGX, J=MERCURY */
    "7057"?: string;
    /** @description Last Exch - Displays the exchange(s) offering the SMART price. A=AMEX, C=CBOE, I=ISE, X=PHLX, N=PSE, B=BOX, Q=NASDAQOM, Z=BATS, W=CBOE2, T=NASDAQBX, M=MIAX, H=GEMINI, E=EDGX, J=MERCURY */
    "7058"?: string;
    /** @description Last Size - The number of unites traded at the last price */
    "7059"?: number;
    /** @description Bid Exch - Displays the exchange(s) offering the SMART price. A=AMEX, C=CBOE, I=ISE, X=PHLX, N=PSE, B=BOX, Q=NASDAQOM, Z=BATS, W=CBOE2, T=NASDAQBX, M=MIAX, H=GEMINI, E=EDGX, J=MERCURY */
    "7068"?: string;
    /** @description IV Rank */
    "7195"?: string;
    /** @description IV Rank */
    "7196"?: string;
    /** @description IV Rank */
    "7197"?: string;
    /** @description IV Percentile */
    "7198"?: string;
    /** @description IV Percentile */
    "7199"?: string;
    /** @description IV Percentile */
    "7200"?: string;
    /** @description IV High Low */
    "7201"?: string;
    /** @description IV High Low */
    "7202"?: string;
    /** @description IV High Low */
    "7203"?: string;
    /** @description IV High Low */
    "7204"?: string;
    /** @description IV High Low */
    "7205"?: string;
    /** @description IV High Low */
    "7206"?: string;
    /** @description HV Rank */
    "7207"?: string;
    /** @description HV Rank */
    "7208"?: string;
    /** @description HV Rank */
    "7209"?: string;
    /** @description HV Percentile */
    "7210"?: string;
    /** @description HV Percentile */
    "7211"?: string;
    /** @description HV Percentile */
    "7212"?: string;
    /** @description HV High Low */
    "7245"?: string;
    /** @description HV High Low */
    "7246"?: string;
    /** @description HV High Low */
    "7247"?: string;
    /** @description HV High Low */
    "7248"?: string;
    /** @description HV High Low */
    "7249"?: string;
    /** @description HV High Low */
    "7263"?: string;
    /** @description ESG */
    "7264"?: string;
    /** @description ESG */
    "7265"?: string;
    /** @description ESG */
    "7266"?: string;
    /** @description ESG */
    "7267"?: string;
    /** @description ESG */
    "7268"?: string;
    /** @description ESG */
    "7269"?: string;
    /** @description ESG */
    "7271"?: string;
    /** @description ESG */
    "7272"?: string;
    /** @description ESG */
    "7273"?: string;
    /** @description ESG */
    "7274"?: string;
    /** @description ESG */
    "7275"?: string;
    /** @description ESG */
    "7276"?: string;
    /** @description ESG */
    "7277"?: string;
    /** @description Average Volume - The average daily trading volume over 90 days. */
    "7282"?: string;
    /**
     * @description Option Implied Vol. % - A prediction of how volatile an underlying will be in the future.
     * At the market volatility estimated for a maturity thirty calendar days forward of the current trading day, and based on option prices from two consecutive expiration months.
     */
    "7283"?: string;
    /** @description Historic Volume (30d) */
    "7284"?: string;
    /** @description Dividend Amount - Displays the amount of the next dividend. */
    "7286"?: number;
    /**
     * @description Dividend Yield % - This value is the toal of the expected dividend payments over the next twelve months per share divided by the Current Price and is expressed as a percentage.
     * For derivatives, this displays the total of the expected dividend payments over the expiry date.
     */
    "7287"?: string;
    /** @description Ex-date of the dividend */
    "7288"?: string;
    /** @description Market Cap */
    "7289"?: string;
    /** @description P/E */
    "7290"?: string;
    /** @description 52 Week High - The highest price for the past 52 weeks. */
    "7293"?: string;
    /** @description 52 Week Low - The lowest price for the past 52 weeks. */
    "7294"?: string;
    /** @description Open - Today's opening price. */
    "7295"?: number;
    /** @description Close - Today's closing price. */
    "7296"?: number;
    /** @description Reuters Fundamentals */
    "7331"?: string;
    /** @description ESG */
    "7370"?: string;
    /** @description ESG */
    "7371"?: string;
    /** @description ESG */
    "7372"?: string;
    /** @description Mark - The mark price is, the ask price if ask is less than last price, the bid price if bid is more than the last price, otherwise it's equal to last price */
    "7635"?: string;
    /** @description shortable invetory */
    "7636"?: number;
    /** @description Fee rebate rate */
    "7637"?: string;
    /** @description Shortable - Describes the level of difficulty with which the security can be sold short. */
    "7644"?: string;
    /** @description EMA(200) - Exponential moving average (N=200). */
    "7674"?: string;
    /** @description EMA(100) - Exponential moving average (N=100). */
    "7675"?: string;
    /** @description EMA(50) - Exponential moving average (N=50). */
    "7676"?: string;
    /** @description EMA(20) - Exponential moving average (N=20). */
    "7677"?: string;
    /** @description Price/EMA(20) - Price to Exponential moving average (N=20) ratio -1, displayed in percents. */
    "7681"?: string;
    /**
     * @description Last Yield - Implied yield of the bond if it is purchased at the current last price. Last yield is calculated using the Last price on all possible call dates.
     * It is assumed that prepayment occurs if the bond has call or put provisions and the issuer can offer a lower coupon rate based on current market rates.
     * The yield to worst will be the lowest of the yield to maturity or yield to call (if the bond has prepayment provisions). Yield to worse may be the same as yield to maturity but never higher.
     */
    "7698"?: string;
    /**
     * @description Bid Yield - Implied yield of the bond if it is purchased at the current bid price. Bid yield is calculated using the Ask on all possible call dates.
     * It is assumed that prepayment occurs if the bond has call or put provisions and the issuer can offer a lower coupon rate based on current market rates.
     * The yield to worst will be the lowest of the yield to maturity or yield to call (if the bond has prepayment provisions). Yield to worse may be the same as yield to maturity but never higher.
     */
    "7699"?: string;
    /** @description Beta - Beta is against standard index. */
    "7718"?: string;
    /**
     * @description Ask Yield - Implied yield of the bond if it is purchased at the current offer. Ask yield is calculated using the Bid on all possible call dates.
     * It is assumed that prepayment occurs if the bond has call or put provisions and the issuer can offer a lower coupon rate based on current market rates.
     * The yield to worst will be the lowest of the yield to maturity or yield to call (if the bond has prepayment provisions). Yield to worse may be the same as yield to maturity but never higher.
     */
    "7720"?: string;
    /** @description Reuters Fundamentals */
    "7743"?: string;
    /** @description ESG */
    "7761"?: string;
    /** @description 26 Week High - The highest price for the past 26 weeks. */
    "7992"?: string;
    /** @description 26 Week Low - The lowest price for the past 26 weeks. */
    "7993"?: string;
    /** @description 13 Week High - The highest price for the past 13 weeks. */
    "7994"?: string;
    /** @description 13 Week Low - The lowest price for the past 13 weeks. */
    "7995"?: string;
    /** @description IBKR Contract identifier */
    conid?: number;
    /** @description minimum price increment */
    minTick?: number;
    /** @description Color for Best Bid/Offer Exchange in hex code */
    BboExchange?: string;
    /** @description If market data field values return delayed */
    HasDelayed?: boolean;
    /** @description minimum size increment */
    sizeMinTick?: number;
    BestEligible?: number;
    BestBidExch?: number;
    BestAskExch?: number;
    PreOpenBid?: number;
    LastAttribs?: number;
    /** @description Base time stamp for last update in format YYYYMMDD */
    TimestampBase?: number;
    TimestampDelta?: number;
    LastExch?: number;
    CloseAttribs?: number;
  };
  "scanner-result": {
    total?: number;
    size?: number;
    offset?: number;
    scanTime?: string;
    id?: number;
    position?: string;
    /** @description Contains list of contracts matching the scanner query */
    Contracts?: {
      Contract?: {
        inScanTime?: string;
        distance?: number;
        contractID?: number;
      }[];
    };
  };
  position: {
    acctId?: string;
    conid?: number;
    contractDesc?: string;
    assetClass?: string;
    position?: number;
    mktPrice?: number;
    mktValue?: number;
    currency?: string;
    avgCost?: number;
    avgPrice?: number;
    realizedPnl?: number;
    unrealizedPnl?: number;
    exchs?: string;
    expiry?: string;
    putOrCall?: string;
    multiplier?: number;
    strike?: number;
    exerciseStyle?: string;
    undConid?: number;
    conExchMap?: string[];
    baseMktValue?: number;
    baseMktPrice?: number;
    baseAvgCost?: number;
    baseAvgPrice?: number;
    baseRealizedPnl?: number;
    baseUnrealizedPnl?: number;
    name?: string;
    lastTradingDay?: string;
    group?: string;
    sector?: string;
    sectorGroup?: string;
    ticker?: string;
    undComp?: string;
    undSym?: string;
    fullName?: string;
    pageSize?: number;
    model?: string;
  }[];
  allocation: {
    /** @description portfolio allocation by asset class */
    assetClass?: {
      /** @description long positions allocation */
      long?: {
        STK?: number;
        OPT?: number;
        FUT?: number;
        WAR?: number;
        BOND?: number;
        CASH?: number;
      };
      /** @description short positions allocation */
      short?: {
        STK?: number;
        OPT?: number;
        FUT?: number;
        WAR?: number;
        BOND?: number;
        CASH?: number;
      };
    };
    /** @description portfolio allocation by sector */
    sector?: {
      /** @description long positions allocation */
      long?: {
        Others?: number;
        Utilities?: number;
        Energy?: number;
        Technology?: number;
        Financial?: number;
        Communications?: number;
      };
      /** @description short positions allocation */
      short?: {
        Industrial?: number;
        Consumer?: number;
        Diversified?: number;
      };
    };
    /** @description portfolio allocation by group */
    group?: {
      /** @description long positions allocation */
      long?: {
        Computers?: number;
        Semiconductors?: number;
        Others?: number;
        Chemicals?: number;
        Apparel?: number;
        Communications?: number;
      };
      /** @description short positions allocation */
      short?: {
        Banks?: number;
        Airlines?: number;
        Internet?: number;
      };
    };
  }[];
  accounts: definitions["account"][];
  /** @description account information */
  account: {
    /** @description The account identification value */
    id?: string;
    /**
     * @description The account number
     * @example U12345678 for Individual Live Accounts, DU12345678 for Individual Paper Accounts
     */
    accountId?: string;
    /** @description The accountAlias */
    accountVan?: string;
    /** @description Title of the account */
    accountTitle?: string;
    /**
     * @description Whichever value is not null in this priority
     * @enum {string}
     */
    displayName?: "accountTitle" | "accountVan" | "accountId";
    /** @description User customizable account alias. Refer to [Configure Account Alias](https://guides.interactivebrokers.com/cp/cp.htm#am/settings/accountalias.htm) for details. */
    accountAlias?: string;
    /** @description When the account was opened in unix time. */
    accountStatus?: number;
    /**
     * @description Base currency of the account.
     * @enum {string}
     */
    currency?:
      | "AUD"
      | "GBP"
      | "CAD"
      | "CNH"
      | "CZK"
      | "DKK"
      | "EUR"
      | "HKD"
      | "HUF"
      | "INR"
      | "ILS"
      | "JPY"
      | "MXN"
      | "NOK"
      | "NZD"
      | "PLN"
      | "RUB"
      | "SGD"
      | "SEK"
      | "CHF"
      | "USD";
    /**
     * @description Account Type
     * @enum {string}
     */
    type?: "INDIVIDUAL" | "JOINT" | "ORG" | "TRUST" | "DEMO";
    /** @description UNI - Deprecated property */
    tradingType?: string;
    /** @description If an account is a sub-account to a Financial Advisor. */
    faclient?: boolean;
    /**
     * @description Status of the Account
     *   * O = Open
     *   * P or N = Pending
     *   * A = Abandoned
     *   * R = Rejected
     *   * C = Closed
     *
     * @enum {string}
     */
    clearingStatus?: "O" | "P" | "N" | "A" | "R" | "C";
    /** @description Is a Covestor Account */
    covestor?: boolean;
    parent?: {
      mmc?: string[];
      /** @description Account Number for Money Manager Client */
      accountId?: string;
      /** @description Is MM a Parent Account */
      isMParent?: boolean;
      /** @description Is MM a Child Account */
      isMChild?: boolean;
      /** @description Is a Multiplex Account. These are account models with individual account being parent and managed account being child. */
      isMultiplex?: boolean;
    };
    /** @description Formatted "accountId - accountAlias" */
    desc?: string;
  };
  /** @description account information */
  summary: {
    total?: {
      /** @description total change amount */
      chg?: string;
      /** @description change percent */
      rtn?: string;
      /** @description set to true if any external account data is not available for starting or ending date, resulting in potentially unusual total values. */
      incompleteData?: boolean;
      endVal?: string;
      startVal?: string;
    };
    /** @description date format-- yyyy-MM-dd */
    startDate?: string;
    excludedAccounts?: {
      lastUpdateAttempt?: string;
      fiName?: string;
      acctTitle?: string;
      acctNumAtFI?: string;
      acctId?: string;
      lastUpdate?: string;
      harvestCode?: number;
      lastUpdateStatusCode?: string;
      rc?: number;
    }[];
    lastSuccessfulUpdate?: string;
    accountSummaries?: {
      chg?: string;
      hasAccounts?: string;
      accountTypeName?: string;
      rtn?: string;
      endVal?: string;
      accountTypeCode?: string;
      startVal?: string;
    }[];
    endDate?: string;
    /** @description indicator of user having configured any external accounts */
    hasExternalAccounts?: boolean;
    rc?: number;
    currency?: string;
    userId?: string;
    pm?: string;
    view?: string;
    balanceByDate?: {
      series?: {
        id?: string;
        groupId?: string;
        name?: string;
        date?: number[][];
      }[];
    };
  };
  ledger: {
    commoditymarketvalue?: number;
    futuremarketvalue?: number;
    settledcash?: number;
    exchangerate?: number;
    sessionid?: number;
    cashbalance?: number;
    corporatebondsmarketvalue?: number;
    warrantsmarketvalue?: number;
    netliquidationvalue?: number;
    interest?: number;
    unrealizedpnl?: number;
    stockmarketvalue?: number;
    moneyfunds?: number;
    currency?: string;
    realizedpnl?: number;
    funds?: number;
    acctcode?: string;
    issueroptionsmarketvalue?: number;
    key?: string;
    timestamp?: number;
    severity?: number;
  };
  performance: {
    id?: string;
    /** @description Cumulative performance data */
    cps?: {
      /** @description array of dates, the length should be same as the length of returns inside data. */
      dates?: string[];
      /** @description D means Day */
      freq?: string;
      data?: {
        id?: string;
        /** @description for example-- acctid */
        idType?: string;
        /** @description start date-- yyyyMMdd */
        start?: string;
        baseCurrency?: string;
        /** @description each value stands for price change percent of corresponding date in dates array */
        returns?: number[];
        /** @description end date-- yyyyMMdd */
        end?: string;
      }[];
    };
    /** @description Time period performance data */
    tpps?: {
      /** @description array of dates, the length should be same as the length of returns inside data. */
      dates?: string[];
      /** @description M means Month */
      freq?: string;
      data?: {
        id?: string;
        /** @description for example-- acctid */
        idType?: string;
        /** @description start date-- yyyyMMdd */
        start?: string;
        baseCurrency?: string;
        /** @description each value stands for price change percent of corresponding date in dates array */
        returns?: number[];
        /** @description end date-- yyyyMMdd */
        end?: string;
      }[];
    };
    /** @description Net asset value data for the account or consolidated accounts. NAV data is not applicable to benchmarks. */
    nav?: {
      /** @description array of dates, the length should be same as the length of returns inside data. */
      dates?: string[];
      /** @description D means Day */
      freq?: string;
      data?: {
        id?: string;
        /** @description for example-- acctid */
        idType?: string;
        /** @description start date-- yyyyMMdd */
        start?: string;
        baseCurrency?: string;
        /** @description each value stands for price change percent of corresponding date in dates array */
        returns?: number[];
        /** @description end date-- yyyyMMdd */
        end?: string;
      }[];
    };
    pm?: string;
    included?: string[];
    currencyType?: string;
    rc?: number;
  };
  /** @description account transactions */
  transactions: {
    /** @description will always be getTransactions */
    id?: string;
    /** @description same as request */
    currency?: string;
    /** @description Indicates whether current day and realtime data is included in the result */
    includesRealTime?: boolean;
    /** @description Period start date. Epoch time, GMT */
    from?: number;
    /** @description Period end date. Epoch time, GMT */
    to?: number;
    /** @description Sorted by date descending */
    transactions?: {
      acctid?: string;
      conid?: number;
      /** @description currency code */
      cur?: string;
      /** @description Conversion rate from asset currency to response currency */
      fxRate?: number;
      /** @description Transaction description */
      desc?: string;
      /** @description Date of transaction.  Epoch time, GMT */
      date?: string;
      /**
       * @description Transaction Type Name: Examples: "Sell", "Buy", "Corporate Action",
       * "Dividend Payment", "Transfer", "Payment in Lieu"
       * Dividends and Transfers do not have price and quantity in response
       */
      type?: string;
      /** @description Not applicable for all transaction types */
      qty?: number;
      /** @description In asset currency. Not be applicable for all transaction types. */
      pr?: number;
      /**
       * @description Raw value, no formatting. Net transaction amount (may include commission, tax).
       * In asset currency
       */
      amt?: number;
    }[];
  };
  notifications: {
    /** @description notification date */
    D?: string;
    /** @description unique way to reference this notification */
    ID?: string;
    /** @description FYI code, we can use it to find whether the disclaimer is accepted or not in settings */
    FC?: string;
    /** @description content of notification */
    MD?: string;
    /** @description title of notification */
    MS?: string;
    /** @description 0-unread, 1-read */
    R?: string;
  }[];
  calendar_request: {
    date?: {
      /** @description start date of a period. for example 20180808-0400 */
      start?: string;
      /** @description end date of a period. for example 20180808-0400 */
      end?: string;
    };
    filters?: {
      /** @description value can be 'true' or 'false'. */
      recently_held?: string;
      /** @description value can be 'true' or 'false'. */
      corporate_earnings?: string;
      /** @description value can be 'true' or 'false'. */
      DivExDates?: string;
      /** @description value can be 'true' or 'false'. */
      ipo?: string;
      /** @description value can be 'true' or 'false'. */
      splits?: string;
      /** @description value can be 'true' or 'false'. */
      corporate_events?: string;
      /** @description value can be 'true' or 'false'. */
      economic_events?: string;
      /** @description value can be 'true' or 'false'. */
      option_show_monthly?: string;
      /** @description value can be 'true' or 'false'. */
      option_show_weekly?: string;
      /** @description default is 'All'. */
      country?: string;
      /** @description default is '250'. */
      limit?: string;
      /** @description default is '50'. */
      limit_region?: string;
    };
  };
  /** @description events */
  events: {
    index_date_type?: string;
    event_type?: string;
    /** @description will be different for different event types */
    data?: { [key: string]: unknown };
    conids?: string[];
    /** @description for exmple 20180817T040000+0000 */
    index_date?: string;
    /** @description for example RSE */
    source?: string;
    /** @description for example 11662135 */
    event_key?: string;
    tooltips?: { [key: string]: unknown };
    status?: string;
  }[];
}

export interface operations {}

export interface external {}
